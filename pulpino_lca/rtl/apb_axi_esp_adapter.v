// Generated by stratus_hls 17.20-p100  (88533.190925)
// Fri Mar 16 23:00:28 2018
// from ../adapter/src/apb_axi_esp_adapter.cc

`timescale 1ps / 1ps

      
module apb_axi_esp_adapter_t(clk, reset, irq, acc_done, debug, conf_done, conf_info_op, conf_info_nrows, conf_info_ncols, conf_info_offset_din_1, conf_info_offset_din_2, conf_info_offset_dout, acc_rst, apb_target_PADDR, apb_target_PSELX, apb_target_PENABLE, apb_target_PWRITE, apb_target_PWDATA, apb_target_PRDATA, apb_target_PREADY, apb_target_PSLVERR, axi_initiator_AWVALID, axi_initiator_AWLEN, axi_initiator_AWSIZE, axi_initiator_AWBURST, axi_initiator_AWID, axi_initiator_AWADDR
          , axi_initiator_AWREADY, axi_initiator_AWLOCK, axi_initiator_AWCACHE, axi_initiator_AWPROT, axi_initiator_AWQOS, axi_initiator_AWREGION, axi_initiator_AWUSER, axi_initiator_WVALID, axi_initiator_WSTRB, axi_initiator_WDATA, axi_initiator_WLAST, axi_initiator_WREADY, axi_initiator_WUSER, axi_initiator_BREADY, axi_initiator_BID, axi_initiator_BVALID, axi_initiator_BRESP, axi_initiator_BUSER, axi_initiator_ARVALID, axi_initiator_ARLEN, axi_initiator_ARSIZE, axi_initiator_ARBURST
          , axi_initiator_ARID, axi_initiator_ARADDR, axi_initiator_ARREADY, axi_initiator_ARLOCK, axi_initiator_ARCACHE, axi_initiator_ARPROT, axi_initiator_ARQOS, axi_initiator_ARREGION, axi_initiator_ARUSER, axi_initiator_RREADY, axi_initiator_RVALID, axi_initiator_RID, axi_initiator_RDATA, axi_initiator_RRESP, axi_initiator_RLAST, axi_initiator_RUSER, dma_read_ctrl_valid, dma_read_ctrl_data_index, dma_read_ctrl_data_length, dma_read_ctrl_ready, dma_read_chnl_valid, dma_read_chnl_data
          , dma_read_chnl_ready, dma_write_ctrl_valid, dma_write_ctrl_data_index, dma_write_ctrl_data_length, dma_write_ctrl_ready, dma_write_chnl_valid, dma_write_chnl_data, dma_write_chnl_ready);

      input clk;
      input reset;
      input acc_done;
      input [31:0] debug;
      input [31:0] apb_target_PADDR;
      input apb_target_PSELX;
      input apb_target_PENABLE;
      input apb_target_PWRITE;
      input [31:0] apb_target_PWDATA;
      input axi_initiator_AWREADY;
      input axi_initiator_WREADY;
      input [1:0] axi_initiator_BID;
      input axi_initiator_BVALID;
      input [1:0] axi_initiator_BRESP;
      input axi_initiator_BUSER;
      input axi_initiator_ARREADY;
      input axi_initiator_RVALID;
      input [1:0] axi_initiator_RID;
      input [31:0] axi_initiator_RDATA;
      input [1:0] axi_initiator_RRESP;
      input axi_initiator_RLAST;
      input axi_initiator_RUSER;
      input dma_read_ctrl_valid;
      input [31:0] dma_read_ctrl_data_index;
      input [31:0] dma_read_ctrl_data_length;
      input dma_read_chnl_ready;
      input dma_write_ctrl_valid;
      input [31:0] dma_write_ctrl_data_index;
      input [31:0] dma_write_ctrl_data_length;
      input dma_write_chnl_valid;
      input [31:0] dma_write_chnl_data;
      output irq;
      output conf_done;
      reg conf_done;
      output [31:0] conf_info_op;
      reg [31:0] conf_info_op;
      output [31:0] conf_info_nrows;
      reg [31:0] conf_info_nrows;
      output [31:0] conf_info_ncols;
      reg [31:0] conf_info_ncols;
      output [31:0] conf_info_offset_din_1;
      reg [31:0] conf_info_offset_din_1;
      output [31:0] conf_info_offset_din_2;
      reg [31:0] conf_info_offset_din_2;
      output [31:0] conf_info_offset_dout;
      reg [31:0] conf_info_offset_dout;
      output acc_rst;
      reg acc_rst;
      output [31:0] apb_target_PRDATA;
      reg [31:0] apb_target_PRDATA;
      output apb_target_PREADY;
      output apb_target_PSLVERR;
      reg apb_target_PSLVERR;
      output axi_initiator_AWVALID;
      output [7:0] axi_initiator_AWLEN;
      output [2:0] axi_initiator_AWSIZE;
      output [1:0] axi_initiator_AWBURST;
      output [1:0] axi_initiator_AWID;
      output [31:0] axi_initiator_AWADDR;
      output axi_initiator_AWLOCK;
      output [3:0] axi_initiator_AWCACHE;
      output [2:0] axi_initiator_AWPROT;
      output [3:0] axi_initiator_AWQOS;
      output [3:0] axi_initiator_AWREGION;
      output axi_initiator_AWUSER;
      output axi_initiator_WVALID;
      output [3:0] axi_initiator_WSTRB;
      output [31:0] axi_initiator_WDATA;
      output axi_initiator_WLAST;
      output axi_initiator_WUSER;
      output axi_initiator_BREADY;
      output axi_initiator_ARVALID;
      output [7:0] axi_initiator_ARLEN;
      output [2:0] axi_initiator_ARSIZE;
      output [1:0] axi_initiator_ARBURST;
      output [1:0] axi_initiator_ARID;
      output [31:0] axi_initiator_ARADDR;
      output axi_initiator_ARLOCK;
      output [3:0] axi_initiator_ARCACHE;
      output [2:0] axi_initiator_ARPROT;
      output [3:0] axi_initiator_ARQOS;
      output [3:0] axi_initiator_ARREGION;
      output axi_initiator_ARUSER;
      output axi_initiator_RREADY;
      output dma_read_ctrl_ready;
      output dma_read_chnl_valid;
      reg dma_read_chnl_valid;
      output [31:0] dma_read_chnl_data;
      reg [31:0] dma_read_chnl_data;
      output dma_write_ctrl_ready;
      output dma_write_chnl_ready;
      reg dma_write_chnl_ready;
      wire apb_axi_esp_adapter_t_Not_1U_1U_4_115_out1;
      wire apb_axi_esp_adapter_t_Not_1U_1U_4_113_out1;
      wire apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_106_out1;
      wire apb_axi_esp_adapter_t_And_1Ux1U_1U_4_105_out1;
      wire apb_axi_esp_adapter_t_Not_1U_1U_4_104_out1;
      wire apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_103_out1;
      wire apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_107_out1;
      wire apb_axi_esp_adapter_t_And_1Ux1U_1U_4_109_out1;
      wire apb_axi_esp_adapter_t_Not_1U_1U_4_108_out1;
      reg dma_write_ctrl_sync_rcv_ready_flop;
      reg apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_110_out1;
      reg dma_write_ctrl_sync_rcv_reset_ready_curr;
      reg dma_write_ctrl_sync_rcv_reset_ready_prev;
      reg dma_write_ctrl_sync_rcv_set_ready_prev;
      reg[31:0] apb_axi_esp_adapter_t_N_Mux_32_2_0_4_112_out1;
      reg[31:0] apb_axi_esp_adapter_t_N_Mux_32_2_0_4_111_out1;
      wire apb_axi_esp_adapter_t_Not_1U_1U_4_101_out1;
      wire apb_axi_esp_adapter_t_Not_1U_1U_4_99_out1;
      wire apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_92_out1;
      wire apb_axi_esp_adapter_t_And_1Ux1U_1U_4_91_out1;
      wire apb_axi_esp_adapter_t_Not_1U_1U_4_90_out1;
      wire apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_89_out1;
      wire apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_93_out1;
      wire apb_axi_esp_adapter_t_And_1Ux1U_1U_4_95_out1;
      wire apb_axi_esp_adapter_t_Not_1U_1U_4_94_out1;
      reg dma_read_ctrl_sync_rcv_ready_flop;
      reg apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_96_out1;
      reg dma_read_ctrl_sync_rcv_reset_ready_curr;
      reg dma_read_ctrl_sync_rcv_reset_ready_prev;
      reg dma_read_ctrl_sync_rcv_set_ready_prev;
      reg[31:0] apb_axi_esp_adapter_t_N_Mux_32_2_0_4_98_out1;
      reg[31:0] apb_axi_esp_adapter_t_N_Mux_32_2_0_4_97_out1;
      wire apb_axi_esp_adapter_t_Not_1U_1U_4_87_out1;
      wire apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_79_out1;
      wire apb_axi_esp_adapter_t_And_1Ux1U_1U_4_78_out1;
      wire apb_axi_esp_adapter_t_Not_1U_1U_4_77_out1;
      wire apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_76_out1;
      wire apb_axi_esp_adapter_t_And_1Ux1U_1U_4_82_out1;
      wire apb_axi_esp_adapter_t_Not_1U_1U_4_81_out1;
      reg axi_initiator_xtor_b_sync_rcv_ready_flop;
      reg apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_83_out1;
      reg axi_initiator_xtor_b_sync_rcv_reset_ready_curr;
      reg axi_initiator_xtor_b_sync_rcv_reset_ready_prev;
      reg axi_initiator_xtor_b_sync_rcv_set_ready_prev;
      wire apb_axi_esp_adapter_t_Not_1U_1U_4_74_out1;
      wire apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_64_out1;
      wire apb_axi_esp_adapter_t_And_1Ux1U_1U_4_63_out1;
      wire apb_axi_esp_adapter_t_Not_1U_1U_4_62_out1;
      wire apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_61_out1;
      wire apb_axi_esp_adapter_t_And_1Ux1U_1U_4_67_out1;
      wire apb_axi_esp_adapter_t_Not_1U_1U_4_66_out1;
      reg axi_initiator_xtor_r_sync_rcv_ready_flop;
      reg apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_68_out1;
      reg axi_initiator_xtor_r_sync_rcv_reset_ready_curr;
      reg axi_initiator_xtor_r_sync_rcv_reset_ready_prev;
      reg axi_initiator_xtor_r_sync_rcv_set_ready_prev;
      reg[31:0] apb_axi_esp_adapter_t_N_Mux_32_2_0_4_70_out1;
      wire apb_axi_esp_adapter_t_Not_1U_1U_4_59_out1;
      wire apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_55_out1;
      wire apb_axi_esp_adapter_t_And_1Ux1U_1U_4_54_out1;
      wire apb_axi_esp_adapter_t_Not_1U_1U_4_53_out1;
      wire apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_52_out1;
      wire apb_axi_esp_adapter_t_Not_1U_1U_4_57_out1;
      reg axi_initiator_xtor_ar_sync_snd_valid_flop;
      reg apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_58_out1;
      reg axi_initiator_xtor_ar_sync_snd_reset_valid_curr;
      reg axi_initiator_xtor_ar_sync_snd_reset_valid_prev;
      reg axi_initiator_xtor_ar_sync_snd_set_valid_prev;
      wire apb_axi_esp_adapter_t_Not_1U_1U_4_50_out1;
      wire apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_46_out1;
      wire apb_axi_esp_adapter_t_And_1Ux1U_1U_4_45_out1;
      wire apb_axi_esp_adapter_t_Not_1U_1U_4_44_out1;
      wire apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_43_out1;
      wire apb_axi_esp_adapter_t_Not_1U_1U_4_48_out1;
      reg axi_initiator_xtor_w_sync_snd_valid_flop;
      reg apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_49_out1;
      reg axi_initiator_xtor_w_sync_snd_reset_valid_curr;
      reg axi_initiator_xtor_w_sync_snd_reset_valid_prev;
      reg axi_initiator_xtor_w_sync_snd_set_valid_prev;
      wire apb_axi_esp_adapter_t_Not_1U_1U_4_41_out1;
      wire apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_37_out1;
      wire apb_axi_esp_adapter_t_And_1Ux1U_1U_4_36_out1;
      wire apb_axi_esp_adapter_t_Not_1U_1U_4_35_out1;
      wire apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_34_out1;
      wire apb_axi_esp_adapter_t_Not_1U_1U_4_39_out1;
      reg axi_initiator_xtor_aw_sync_snd_valid_flop;
      reg apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_40_out1;
      reg axi_initiator_xtor_aw_sync_snd_reset_valid_curr;
      reg axi_initiator_xtor_aw_sync_snd_reset_valid_prev;
      reg axi_initiator_xtor_aw_sync_snd_set_valid_prev;
      wire apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_80_out1;
      wire apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_56_out1;
      wire apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_47_out1;
      wire apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_38_out1;
      reg[1:0] apb_target_xtor_main_thread_next;
      reg apb_axi_esp_adapter_t_N_Muxb_1_9_5_4_22_out1;
      reg apb_axi_esp_adapter_t_N_Muxb_1_8_4_4_21_out1;
      wire apb_axi_esp_adapter_t_Equal_32Ux5U_1U_4_19_out1;
      wire apb_axi_esp_adapter_t_Equal_32Ux5U_1U_4_18_out1;
      wire apb_axi_esp_adapter_t_Equal_32Ux4U_1U_4_17_out1;
      wire apb_axi_esp_adapter_t_Equal_32Ux4U_1U_4_16_out1;
      wire apb_axi_esp_adapter_t_Equal_32Ux3U_1U_4_15_out1;
      wire apb_axi_esp_adapter_t_Not_1U_1U_4_14_out1;
      wire apb_axi_esp_adapter_t_OrReduction_32U_1U_4_11_out1;
      wire apb_axi_esp_adapter_t_And_1Ux1U_1U_4_8_out1;
      wire apb_axi_esp_adapter_t_Not_1U_1U_4_5_out1;
      wire apb_axi_esp_adapter_t_Not_1U_1U_4_5_in1;
      wire apb_axi_esp_adapter_t_Equal_32Ux5U_1U_4_20_out1;
      wire apb_axi_esp_adapter_t_And_1Ux1U_1U_4_30_out1;
      reg[31:0] csr_sig;
      wire apb_axi_esp_adapter_t_And_1Ux1U_1U_4_29_out1;
      wire apb_axi_esp_adapter_t_And_1Ux1U_1U_4_28_out1;
      wire apb_axi_esp_adapter_t_And_1Ux1U_1U_4_27_out1;
      wire apb_axi_esp_adapter_t_And_1Ux1U_1U_4_26_out1;
      wire apb_axi_esp_adapter_t_And_1Ux1U_1U_4_25_out1;
      wire apb_axi_esp_adapter_t_And_1Ux1U_1U_4_24_out1;
      wire apb_axi_esp_adapter_t_Not_1U_1U_4_31_out1;
      wire apb_axi_esp_adapter_t_And_1Ux1U_1U_4_12_out1;
      wire apb_axi_esp_adapter_t_Not_1U_1U_4_32_out1;
      wire apb_axi_esp_adapter_t_And_1Ux1U_1U_4_13_out1;
      reg[31:0] apb_axi_esp_adapter_t_N_Mux_32_9_3_4_23_out1;
      wire apb_axi_esp_adapter_t_Not_1U_1U_4_10_out1;
      reg apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_33_out1;
      reg[1:0] global_state2;
      reg[2:0] global_state1_next;
      reg apb_to_esp_start_toggle_sig;
      reg s_reg_2;
      wire apb_axi_esp_adapter_t_Not_1U_1U_4_2_out1;
      reg[31:0] op_sig;
      reg[31:0] nrows_sig;
      reg[31:0] ncols_sig;
      reg[31:0] offset_din1_sig;
      reg[31:0] offset_din2_sig;
      reg[31:0] offset_dout_sig;
      wire apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_1_out1;
      reg[2:0] global_state1;
      reg[3:0] global_state_next;
      reg[1:0] apb_axi_esp_adapter_t_Add_2Ux1U_2U_4_148_in2;
      reg[31:0] apb_axi_esp_adapter_t_Add_32Ux32U_32U_4_147_in1;
      reg[31:0] apb_axi_esp_adapter_t_N_Mux_32_2_2_4_145_out1;
      reg[31:0] apb_axi_esp_adapter_t_Sub_32Ux32U_32U_4_144_in1;
      reg gs_ctrl11;
      reg[31:0] apb_axi_esp_adapter_t_Sub_32Ux32U_32U_4_144_in2;
      reg gs_ctrl10;
      reg[31:0] apb_axi_esp_adapter_t_Add_32Ux2S_32S_4_139_in2;
      reg[31:0] apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_in2;
      wire apb_axi_esp_adapter_t_OrReduction_28U_1U_4_134_out1;
      reg[27:0] apb_axi_esp_adapter_t_OrReduction_28U_1U_4_134_in1;
      reg gs_ctrl7;
      reg[31:0] dma_write_ctrl_data_buf_index;
      reg[31:0] dma_write_ctrl_data_buf_length;
      reg[31:0] axi_initiator_xtor_r_data_buf_data;
      wire apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_65_out1;
      reg[31:0] apb_axi_esp_adapter_t_Add_32Ux2S_32S_4_127_in2;
      reg gs_ctrl6;
      reg[1:0] apb_axi_esp_adapter_t_Add_2Ux2U_2U_4_125_in2;
      reg[31:0] apb_axi_esp_adapter_t_Add_32Ux32U_32U_4_124_in2;
      reg[31:0] apb_axi_esp_adapter_t_N_Mux_32_2_1_4_121_in2;
      wire apb_axi_esp_adapter_t_OrReduction_28U_1U_4_120_out1;
      reg[27:0] apb_axi_esp_adapter_t_OrReduction_28U_1U_4_120_in1;
      reg gs_ctrl1;
      reg apb_axi_esp_adapter_t_Not_1U_1U_4_119_in1;
      reg gs_ctrl0;
      reg[31:0] dma_read_ctrl_data_buf_index;
      reg[31:0] dma_read_ctrl_data_buf_length;
      wire[31:0] apb_axi_esp_adapter_t_Sub_32Ux32U_32U_4_144_out1;
      /*signed*/wire[31:0] apb_axi_esp_adapter_t_Add_32Ux2S_32S_4_139_out1;
      reg[31:0] s_reg_38;
      reg[31:0] s_reg_37;
      /*signed*/wire[31:0] apb_axi_esp_adapter_t_Sub_32Ux1U_32S_4_137_out1;
      reg[31:0] s_reg_36;
      reg[31:0] apb_axi_esp_adapter_t_N_Mux_32_2_0_4_146_out1;
      reg[31:0] s_reg_33;
      wire[1:0] apb_axi_esp_adapter_t_Add_2Ux1U_2U_4_148_out1;
      wire[31:0] apb_axi_esp_adapter_t_Add_32Ux32U_32U_4_147_out1;
      /*signed*/wire[31:0] apb_axi_esp_adapter_t_Add_32Ux2S_32S_4_127_out1;
      reg[31:0] s_reg_30;
      wire[1:0] apb_axi_esp_adapter_t_Add_2Ux2U_2U_4_125_out1;
      wire[31:0] apb_axi_esp_adapter_t_Add_32Ux32U_32U_4_124_out1;
      wire[31:0] apb_axi_esp_adapter_t_Sub_32Ux32U_32U_4_122_out1;
      reg[31:0] s_reg_28;
      reg[31:0] s_reg_23;
      reg[31:0] apb_axi_esp_adapter_t_N_Mux_32_2_0_4_118_out1;
      reg[31:0] axi_initiator_xtor_ar_chan_data_addr;
      reg[1:0] s_reg_29;
      reg[1:0] s_reg_24;
      reg[1:0] axi_initiator_xtor_ar_chan_data_tid;
      reg axi_initiator_xtor_ar_chan_data_size_slice;
      reg[7:0] s_reg_27;
      /*signed*/wire[7:0] apb_axi_esp_adapter_t_Sub_8Ux1U_8S_4_123_out1;
      reg[7:0] axi_initiator_xtor_ar_chan_data_len;
      reg s_reg_39;
      wire apb_axi_esp_adapter_t_Equal_32Sx32U_1U_4_140_out1;
      reg axi_initiator_xtor_w_chan_data_last;
      reg[31:0] s_reg_41;
      reg[31:0] axi_initiator_xtor_w_chan_data_data;
      reg[3:0] axi_initiator_xtor_w_chan_data_strb;
      reg[31:0] s_reg_31;
      reg[31:0] apb_axi_esp_adapter_t_N_Mux_32_2_0_4_132_out1;
      reg[31:0] axi_initiator_xtor_aw_chan_data_addr;
      reg[1:0] s_reg_32;
      reg[1:0] axi_initiator_xtor_aw_chan_data_tid;
      reg axi_initiator_xtor_aw_chan_data_size_slice;
      reg[7:0] s_reg_35;
      /*signed*/wire[7:0] apb_axi_esp_adapter_t_Sub_8Ux1U_8S_4_136_out1;
      reg[7:0] axi_initiator_xtor_aw_chan_data_len;
      wire apb_axi_esp_adapter_t_Not_1U_1U_4_143_out1;
      wire apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_88_out1;
      reg axi_initiator_xtor_b_set_ready_curr;
      wire apb_axi_esp_adapter_t_Not_1U_1U_4_128_out1;
      reg axi_initiator_xtor_r_set_ready_curr;
      wire apb_axi_esp_adapter_t_Not_1U_1U_4_126_out1;
      reg axi_initiator_xtor_ar_set_valid_curr;
      reg axi_initiator_xtor_w_set_valid_curr;
      wire apb_axi_esp_adapter_t_Not_1U_1U_4_138_out1;
      reg axi_initiator_xtor_aw_set_valid_curr;
      wire apb_axi_esp_adapter_t_Not_1U_1U_4_133_out1;
      reg dma_write_ctrl_set_ready_curr;
      wire apb_axi_esp_adapter_t_Not_1U_1U_4_119_out1;
      reg dma_read_ctrl_set_ready_curr;
      wire apb_axi_esp_adapter_t_LessThan_32Ux32U_1U_4_130_out1;
      reg[31:0] s_reg_25;
      reg[31:0] apb_axi_esp_adapter_t_N_Mux_32_2_0_4_129_out1;
      wire apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1;
      reg[31:0] apb_axi_esp_adapter_t_N_Mux_32_2_1_4_121_out1;
      wire apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_75_out1;
      reg[31:0] s_reg_42;
      reg s_reg_40;
      wire apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_51_out1;
      wire apb_axi_esp_adapter_t_LessThan_32Ux32U_1U_4_141_out1;
      reg[31:0] s_reg_34;
      reg[31:0] s_reg_26;
      wire apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1;
      reg[31:0] apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1;
      wire apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1;
      wire apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1;
      reg[31:0] apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1;
      wire apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1;
      reg[31:0] apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1;
      wire apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_100_out1;
      reg[3:0] global_state;
      reg apb_to_esp_done_toggle_sig;
      reg irq_reset_toggle_sig;
      wire apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_3_out1;

         // thread: drive_irq
         assign irq = apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_3_out1;

         // resource: apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_3
         assign apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_3_out1 = apb_to_esp_done_toggle_sig ^ irq_reset_toggle_sig;

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_dma_write_chnl_ready
            if (reset == 1'b0) begin
               dma_write_chnl_ready <= 1'd0;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd13: begin
                     if (conf_done) begin
                        if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_100_out1) begin
                           if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1 && (32'd0000000000 == apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1 && 32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1)))))) begin
                              dma_write_chnl_ready <= 1'd1;
                           end
                        end
                        else begin
                           if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1 && 32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1)))) begin
                              dma_write_chnl_ready <= 1'd1;
                           end
                        end
                     end
                  end
                  
                  4'd01: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1 && (32'd0000000000 == apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1 && 32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1)))))) begin
                        dma_write_chnl_ready <= 1'd1;
                     end
                  end
                  
                  4'd05: begin
                     if (32'd0000000000 == s_reg_26 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1 && 32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1))))) begin
                        dma_write_chnl_ready <= 1'd1;
                     end
                  end
                  
                  4'd06: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1 && 32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1))) begin
                        dma_write_chnl_ready <= 1'd1;
                     end
                  end
                  
                  4'd07: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1 && 32'd0000000000 != s_reg_34) begin
                        dma_write_chnl_ready <= 1'd1;
                     end
                  end
                  
                  4'd08: begin
                     if (dma_write_chnl_valid) begin
                        if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_51_out1 && apb_axi_esp_adapter_t_LessThan_32Ux32U_1U_4_141_out1) begin
                           dma_write_chnl_ready <= 1'd1;
                        end
                        else begin
                           dma_write_chnl_ready <= 1'd0;
                        end
                     end
                  end
                  
                  4'd09: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_51_out1 && s_reg_40) begin
                        dma_write_chnl_ready <= 1'd1;
                     end
                  end
                  
                  4'd11: begin
                     if (32'd0000000000 != s_reg_42 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1 && 32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1)) begin
                        dma_write_chnl_ready <= 1'd1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_32
         always @(posedge clk)
          begin :drive_dma_read_chnl_data
            if (reset == 1'b0) begin
               dma_read_chnl_data <= 32'd0000000000;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd13: begin
                     if (conf_done && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_100_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_1_4_121_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_75_out1)))))) begin
                        dma_read_chnl_data <= apb_axi_esp_adapter_t_N_Mux_32_2_0_4_129_out1;
                     end
                  end
                  
                  4'd01: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_1_4_121_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_75_out1)))) begin
                        dma_read_chnl_data <= apb_axi_esp_adapter_t_N_Mux_32_2_0_4_129_out1;
                     end
                  end
                  
                  4'd02: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1 && (32'd0000000000 != s_reg_25 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_75_out1)) begin
                        dma_read_chnl_data <= apb_axi_esp_adapter_t_N_Mux_32_2_0_4_129_out1;
                     end
                  end
                  
                  4'd03: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_75_out1) begin
                        dma_read_chnl_data <= apb_axi_esp_adapter_t_N_Mux_32_2_0_4_129_out1;
                     end
                  end
                  
                  4'd04: begin
                     if (dma_read_chnl_ready && (apb_axi_esp_adapter_t_LessThan_32Ux32U_1U_4_130_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_75_out1)) begin
                        dma_read_chnl_data <= apb_axi_esp_adapter_t_N_Mux_32_2_0_4_129_out1;
                     end
                  end
                  
                  4'd05: begin
                     if (32'd0000000000 != s_reg_26 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_1_4_121_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_75_out1))) begin
                        dma_read_chnl_data <= apb_axi_esp_adapter_t_N_Mux_32_2_0_4_129_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_dma_read_chnl_valid
            if (reset == 1'b0) begin
               dma_read_chnl_valid <= 1'd0;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd13: begin
                     if (conf_done && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_100_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_1_4_121_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_75_out1)))))) begin
                        dma_read_chnl_valid <= 1'd1;
                     end
                  end
                  
                  4'd01: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_1_4_121_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_75_out1)))) begin
                        dma_read_chnl_valid <= 1'd1;
                     end
                  end
                  
                  4'd02: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1 && (32'd0000000000 != s_reg_25 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_75_out1)) begin
                        dma_read_chnl_valid <= 1'd1;
                     end
                  end
                  
                  4'd03: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_75_out1) begin
                        dma_read_chnl_valid <= 1'd1;
                     end
                  end
                  
                  4'd04: begin
                     if (dma_read_chnl_ready) begin
                        if (apb_axi_esp_adapter_t_LessThan_32Ux32U_1U_4_130_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_75_out1) begin
                           dma_read_chnl_valid <= 1'd1;
                        end
                        else begin
                           dma_read_chnl_valid <= 1'd0;
                        end
                     end
                  end
                  
                  4'd05: begin
                     if (32'd0000000000 != s_reg_26 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_1_4_121_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_75_out1))) begin
                        dma_read_chnl_valid <= 1'd1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_1
         always @(posedge clk)
          begin :drive_dma_read_ctrl_set_ready_curr
            if (reset == 1'b0) begin
               dma_read_ctrl_set_ready_curr <= 1'd0;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd13: begin
                     if (conf_done && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_100_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1)) begin
                        dma_read_ctrl_set_ready_curr <= apb_axi_esp_adapter_t_Not_1U_1U_4_119_out1;
                     end
                  end
                  
                  4'd01: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1) begin
                        dma_read_ctrl_set_ready_curr <= apb_axi_esp_adapter_t_Not_1U_1U_4_119_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_1
         always @(posedge clk)
          begin :drive_dma_write_ctrl_set_ready_curr
            if (reset == 1'b0) begin
               dma_write_ctrl_set_ready_curr <= 1'd0;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd13: begin
                     if (conf_done) begin
                        if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_100_out1) begin
                           if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1 && (32'd0000000000 == apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1))) begin
                              dma_write_ctrl_set_ready_curr <= apb_axi_esp_adapter_t_Not_1U_1U_4_133_out1;
                           end
                        end
                        else begin
                           if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1) begin
                              dma_write_ctrl_set_ready_curr <= apb_axi_esp_adapter_t_Not_1U_1U_4_133_out1;
                           end
                        end
                     end
                  end
                  
                  4'd01: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1 && (32'd0000000000 == apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1))) begin
                        dma_write_ctrl_set_ready_curr <= apb_axi_esp_adapter_t_Not_1U_1U_4_133_out1;
                     end
                  end
                  
                  4'd05: begin
                     if (32'd0000000000 == s_reg_26 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1)) begin
                        dma_write_ctrl_set_ready_curr <= apb_axi_esp_adapter_t_Not_1U_1U_4_133_out1;
                     end
                  end
                  
                  4'd06: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1) begin
                        dma_write_ctrl_set_ready_curr <= apb_axi_esp_adapter_t_Not_1U_1U_4_133_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_1
         always @(posedge clk)
          begin :drive_axi_initiator_xtor_aw_set_valid_curr
            if (reset == 1'b0) begin
               axi_initiator_xtor_aw_set_valid_curr <= 1'd0;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd13: begin
                     if (conf_done) begin
                        if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_100_out1) begin
                           if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1 && (32'd0000000000 == apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1))))) begin
                              axi_initiator_xtor_aw_set_valid_curr <= apb_axi_esp_adapter_t_Not_1U_1U_4_138_out1;
                           end
                        end
                        else begin
                           if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1))) begin
                              axi_initiator_xtor_aw_set_valid_curr <= apb_axi_esp_adapter_t_Not_1U_1U_4_138_out1;
                           end
                        end
                     end
                  end
                  
                  4'd01: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1 && (32'd0000000000 == apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1))))) begin
                        axi_initiator_xtor_aw_set_valid_curr <= apb_axi_esp_adapter_t_Not_1U_1U_4_138_out1;
                     end
                  end
                  
                  4'd05: begin
                     if (32'd0000000000 == s_reg_26 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1)))) begin
                        axi_initiator_xtor_aw_set_valid_curr <= apb_axi_esp_adapter_t_Not_1U_1U_4_138_out1;
                     end
                  end
                  
                  4'd06: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1)) begin
                        axi_initiator_xtor_aw_set_valid_curr <= apb_axi_esp_adapter_t_Not_1U_1U_4_138_out1;
                     end
                  end
                  
                  4'd07: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1) begin
                        axi_initiator_xtor_aw_set_valid_curr <= apb_axi_esp_adapter_t_Not_1U_1U_4_138_out1;
                     end
                  end
                  
                  4'd11: begin
                     if (32'd0000000000 != s_reg_42 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1) begin
                        axi_initiator_xtor_aw_set_valid_curr <= apb_axi_esp_adapter_t_Not_1U_1U_4_138_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_1
         always @(posedge clk)
          begin :drive_axi_initiator_xtor_w_set_valid_curr
            if (reset == 1'b0) begin
               axi_initiator_xtor_w_set_valid_curr <= 1'd0;
            end
            else begin
               case (global_state) 

                  4'd08: begin
                     if (dma_write_chnl_valid && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_51_out1) begin
                        axi_initiator_xtor_w_set_valid_curr <= apb_axi_esp_adapter_t_Not_1U_1U_4_119_out1;
                     end
                  end
                  
                  4'd09: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_51_out1) begin
                        axi_initiator_xtor_w_set_valid_curr <= apb_axi_esp_adapter_t_Not_1U_1U_4_119_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_1
         always @(posedge clk)
          begin :drive_axi_initiator_xtor_ar_set_valid_curr
            if (reset == 1'b0) begin
               axi_initiator_xtor_ar_set_valid_curr <= 1'd0;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd13: begin
                     if (conf_done && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_100_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1)))) begin
                        axi_initiator_xtor_ar_set_valid_curr <= apb_axi_esp_adapter_t_Not_1U_1U_4_126_out1;
                     end
                  end
                  
                  4'd01: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1)) begin
                        axi_initiator_xtor_ar_set_valid_curr <= apb_axi_esp_adapter_t_Not_1U_1U_4_126_out1;
                     end
                  end
                  
                  4'd02: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1) begin
                        axi_initiator_xtor_ar_set_valid_curr <= apb_axi_esp_adapter_t_Not_1U_1U_4_126_out1;
                     end
                  end
                  
                  4'd05: begin
                     if (32'd0000000000 != s_reg_26 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1) begin
                        axi_initiator_xtor_ar_set_valid_curr <= apb_axi_esp_adapter_t_Not_1U_1U_4_126_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_1
         always @(posedge clk)
          begin :drive_axi_initiator_xtor_r_set_ready_curr
            if (reset == 1'b0) begin
               axi_initiator_xtor_r_set_ready_curr <= 1'd0;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd13: begin
                     if (conf_done && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_100_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_1_4_121_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_75_out1)))))) begin
                        axi_initiator_xtor_r_set_ready_curr <= apb_axi_esp_adapter_t_Not_1U_1U_4_128_out1;
                     end
                  end
                  
                  4'd01: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_1_4_121_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_75_out1)))) begin
                        axi_initiator_xtor_r_set_ready_curr <= apb_axi_esp_adapter_t_Not_1U_1U_4_128_out1;
                     end
                  end
                  
                  4'd02: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1 && (32'd0000000000 != s_reg_25 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_75_out1)) begin
                        axi_initiator_xtor_r_set_ready_curr <= apb_axi_esp_adapter_t_Not_1U_1U_4_128_out1;
                     end
                  end
                  
                  4'd03: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_75_out1) begin
                        axi_initiator_xtor_r_set_ready_curr <= apb_axi_esp_adapter_t_Not_1U_1U_4_128_out1;
                     end
                  end
                  
                  4'd04: begin
                     if (dma_read_chnl_ready && (apb_axi_esp_adapter_t_LessThan_32Ux32U_1U_4_130_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_75_out1)) begin
                        axi_initiator_xtor_r_set_ready_curr <= apb_axi_esp_adapter_t_Not_1U_1U_4_128_out1;
                     end
                  end
                  
                  4'd05: begin
                     if (32'd0000000000 != s_reg_26 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_1_4_121_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_75_out1))) begin
                        axi_initiator_xtor_r_set_ready_curr <= apb_axi_esp_adapter_t_Not_1U_1U_4_128_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_1
         always @(posedge clk)
          begin :drive_axi_initiator_xtor_b_set_ready_curr
            if (reset == 1'b0) begin
               axi_initiator_xtor_b_set_ready_curr <= 1'd0;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd13: begin
                     if (conf_done) begin
                        if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_100_out1) begin
                           if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1 && (32'd0000000000 == apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1 && (32'd0000000000 == apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_88_out1))))))) begin
                              axi_initiator_xtor_b_set_ready_curr <= apb_axi_esp_adapter_t_Not_1U_1U_4_143_out1;
                           end
                        end
                        else begin
                           if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1 && (32'd0000000000 == apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_88_out1))))) begin
                              axi_initiator_xtor_b_set_ready_curr <= apb_axi_esp_adapter_t_Not_1U_1U_4_143_out1;
                           end
                        end
                     end
                  end
                  
                  4'd01: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1 && (32'd0000000000 == apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1 && (32'd0000000000 == apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_88_out1))))))) begin
                        axi_initiator_xtor_b_set_ready_curr <= apb_axi_esp_adapter_t_Not_1U_1U_4_143_out1;
                     end
                  end
                  
                  4'd05: begin
                     if (32'd0000000000 == s_reg_26 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1 && (32'd0000000000 == apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_88_out1)))))) begin
                        axi_initiator_xtor_b_set_ready_curr <= apb_axi_esp_adapter_t_Not_1U_1U_4_143_out1;
                     end
                  end
                  
                  4'd06: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1 && (32'd0000000000 == apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_88_out1)))) begin
                        axi_initiator_xtor_b_set_ready_curr <= apb_axi_esp_adapter_t_Not_1U_1U_4_143_out1;
                     end
                  end
                  
                  4'd07: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1 && (32'd0000000000 == s_reg_34 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_88_out1)) begin
                        axi_initiator_xtor_b_set_ready_curr <= apb_axi_esp_adapter_t_Not_1U_1U_4_143_out1;
                     end
                  end
                  
                  4'd08: begin
                     if (dma_write_chnl_valid && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_51_out1 && (!apb_axi_esp_adapter_t_LessThan_32Ux32U_1U_4_141_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_88_out1))) begin
                        axi_initiator_xtor_b_set_ready_curr <= apb_axi_esp_adapter_t_Not_1U_1U_4_143_out1;
                     end
                  end
                  
                  4'd09: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_51_out1 && (!s_reg_40 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_88_out1)) begin
                        axi_initiator_xtor_b_set_ready_curr <= apb_axi_esp_adapter_t_Not_1U_1U_4_143_out1;
                     end
                  end
                  
                  4'd10: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_88_out1) begin
                        axi_initiator_xtor_b_set_ready_curr <= apb_axi_esp_adapter_t_Not_1U_1U_4_143_out1;
                     end
                  end
                  
                  4'd11: begin
                     if (32'd0000000000 != s_reg_42 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1 && (32'd0000000000 == apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_88_out1))) begin
                        axi_initiator_xtor_b_set_ready_curr <= apb_axi_esp_adapter_t_Not_1U_1U_4_143_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: mux_8bx2i
         // resource: regr_8
         always @(posedge clk)
          begin :drive_axi_initiator_xtor_aw_chan_data_len
            if (reset == 1'b0) begin
               axi_initiator_xtor_aw_chan_data_len <= 8'd000;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd13: begin
                     if (conf_done) begin
                        if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_100_out1) begin
                           if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1 && (32'd0000000000 == apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1))))) begin
                              axi_initiator_xtor_aw_chan_data_len <= apb_axi_esp_adapter_t_Sub_8Ux1U_8S_4_136_out1;
                           end
                        end
                        else begin
                           if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1))) begin
                              axi_initiator_xtor_aw_chan_data_len <= apb_axi_esp_adapter_t_Sub_8Ux1U_8S_4_136_out1;
                           end
                        end
                     end
                  end
                  
                  4'd01: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1 && (32'd0000000000 == apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1))))) begin
                        axi_initiator_xtor_aw_chan_data_len <= apb_axi_esp_adapter_t_Sub_8Ux1U_8S_4_136_out1;
                     end
                  end
                  
                  4'd05: begin
                     if (32'd0000000000 == s_reg_26 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1)))) begin
                        axi_initiator_xtor_aw_chan_data_len <= apb_axi_esp_adapter_t_Sub_8Ux1U_8S_4_136_out1;
                     end
                  end
                  
                  4'd06: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1)) begin
                        axi_initiator_xtor_aw_chan_data_len <= apb_axi_esp_adapter_t_Sub_8Ux1U_8S_4_136_out1;
                     end
                  end
                  
                  4'd07: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1) begin
                        axi_initiator_xtor_aw_chan_data_len <= s_reg_35;
                     end
                  end
                  
                  4'd11: begin
                     if (32'd0000000000 != s_reg_42 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1) begin
                        axi_initiator_xtor_aw_chan_data_len <= apb_axi_esp_adapter_t_Sub_8Ux1U_8S_4_136_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_1
         always @(posedge clk)
          begin :drive_axi_initiator_xtor_aw_chan_data_size
            if (reset == 1'b0) begin
               axi_initiator_xtor_aw_chan_data_size_slice <= 1'b0;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd13: begin
                     if (conf_done) begin
                        if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_100_out1) begin
                           if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1 && (32'd0000000000 == apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1))))) begin
                              axi_initiator_xtor_aw_chan_data_size_slice <= 1'b1;
                           end
                        end
                        else begin
                           if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1))) begin
                              axi_initiator_xtor_aw_chan_data_size_slice <= 1'b1;
                           end
                        end
                     end
                  end
                  
                  4'd01: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1 && (32'd0000000000 == apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1))))) begin
                        axi_initiator_xtor_aw_chan_data_size_slice <= 1'b1;
                     end
                  end
                  
                  4'd05: begin
                     if (32'd0000000000 == s_reg_26 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1)))) begin
                        axi_initiator_xtor_aw_chan_data_size_slice <= 1'b1;
                     end
                  end
                  
                  4'd06: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1)) begin
                        axi_initiator_xtor_aw_chan_data_size_slice <= 1'b1;
                     end
                  end
                  
                  4'd07: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1) begin
                        axi_initiator_xtor_aw_chan_data_size_slice <= 1'b1;
                     end
                  end
                  
                  4'd11: begin
                     if (32'd0000000000 != s_reg_42 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1) begin
                        axi_initiator_xtor_aw_chan_data_size_slice <= 1'b1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: mux_2bx2i
         // resource: regr_2
         always @(posedge clk)
          begin :drive_axi_initiator_xtor_aw_chan_data_tid
            if (reset == 1'b0) begin
               axi_initiator_xtor_aw_chan_data_tid <= 2'd0;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd13: begin
                     if (conf_done) begin
                        if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_100_out1) begin
                           if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1 && (32'd0000000000 == apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1))))) begin
                              axi_initiator_xtor_aw_chan_data_tid <= 2'd1;
                           end
                        end
                        else begin
                           if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1))) begin
                              axi_initiator_xtor_aw_chan_data_tid <= 2'd1;
                           end
                        end
                     end
                  end
                  
                  4'd01: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1 && (32'd0000000000 == apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1))))) begin
                        axi_initiator_xtor_aw_chan_data_tid <= 2'd1;
                     end
                  end
                  
                  4'd05: begin
                     if (32'd0000000000 == s_reg_26 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1)))) begin
                        axi_initiator_xtor_aw_chan_data_tid <= 2'd1;
                     end
                  end
                  
                  4'd06: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1)) begin
                        axi_initiator_xtor_aw_chan_data_tid <= 2'd1;
                     end
                  end
                  
                  4'd07: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1) begin
                        axi_initiator_xtor_aw_chan_data_tid <= s_reg_32;
                     end
                  end
                  
                  4'd11: begin
                     if (32'd0000000000 != s_reg_42 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1) begin
                        axi_initiator_xtor_aw_chan_data_tid <= s_reg_32;
                     end
                  end
                  
               endcase

            end
         end

         // resource: mux_32bx2i
         // resource: regr_32
         always @(posedge clk)
          begin :drive_axi_initiator_xtor_aw_chan_data_addr
            if (reset == 1'b0) begin
               axi_initiator_xtor_aw_chan_data_addr <= 32'd0000000000;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd13: begin
                     if (conf_done) begin
                        if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_100_out1) begin
                           if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1 && (32'd0000000000 == apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1))))) begin
                              axi_initiator_xtor_aw_chan_data_addr <= apb_axi_esp_adapter_t_N_Mux_32_2_0_4_132_out1;
                           end
                        end
                        else begin
                           if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1))) begin
                              axi_initiator_xtor_aw_chan_data_addr <= apb_axi_esp_adapter_t_N_Mux_32_2_0_4_132_out1;
                           end
                        end
                     end
                  end
                  
                  4'd01: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1 && (32'd0000000000 == apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1))))) begin
                        axi_initiator_xtor_aw_chan_data_addr <= apb_axi_esp_adapter_t_N_Mux_32_2_0_4_132_out1;
                     end
                  end
                  
                  4'd05: begin
                     if (32'd0000000000 == s_reg_26 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1)))) begin
                        axi_initiator_xtor_aw_chan_data_addr <= apb_axi_esp_adapter_t_N_Mux_32_2_0_4_132_out1;
                     end
                  end
                  
                  4'd06: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1)) begin
                        axi_initiator_xtor_aw_chan_data_addr <= apb_axi_esp_adapter_t_N_Mux_32_2_0_4_132_out1;
                     end
                  end
                  
                  4'd07: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1) begin
                        axi_initiator_xtor_aw_chan_data_addr <= s_reg_31;
                     end
                  end
                  
                  4'd11: begin
                     if (32'd0000000000 != s_reg_42 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1) begin
                        axi_initiator_xtor_aw_chan_data_addr <= s_reg_31;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_4
         always @(posedge clk)
          begin :drive_axi_initiator_xtor_w_chan_data_strb
            if (reset == 1'b0) begin
               axi_initiator_xtor_w_chan_data_strb <= 4'd00;
            end
            else begin
               case (global_state) 

                  4'd08: begin
                     if (dma_write_chnl_valid && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_51_out1) begin
                        axi_initiator_xtor_w_chan_data_strb <= 4'd15;
                     end
                  end
                  
                  4'd09: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_51_out1) begin
                        axi_initiator_xtor_w_chan_data_strb <= 4'd15;
                     end
                  end
                  
               endcase

            end
         end

         // resource: mux_32bx2i
         // resource: regr_32
         always @(posedge clk)
          begin :drive_axi_initiator_xtor_w_chan_data_data
            if (reset == 1'b0) begin
               axi_initiator_xtor_w_chan_data_data <= 32'd0000000000;
            end
            else begin
               case (global_state) 

                  4'd08: begin
                     if (dma_write_chnl_valid && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_51_out1) begin
                        axi_initiator_xtor_w_chan_data_data <= dma_write_chnl_data;
                     end
                  end
                  
                  4'd09: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_51_out1) begin
                        axi_initiator_xtor_w_chan_data_data <= s_reg_41;
                     end
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_axi_initiator_xtor_w_chan_data_last
            if (reset == 1'b0) begin
               axi_initiator_xtor_w_chan_data_last <= 1'b0;
            end
            else begin
               case (global_state) 

                  4'd08: begin
                     if (dma_write_chnl_valid && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_51_out1) begin
                        axi_initiator_xtor_w_chan_data_last <= apb_axi_esp_adapter_t_Equal_32Sx32U_1U_4_140_out1;
                     end
                  end
                  
                  4'd09: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_51_out1) begin
                        axi_initiator_xtor_w_chan_data_last <= s_reg_39;
                     end
                  end
                  
               endcase

            end
         end

         // resource: mux_8bx2i
         // resource: regr_8
         always @(posedge clk)
          begin :drive_axi_initiator_xtor_ar_chan_data_len
            if (reset == 1'b0) begin
               axi_initiator_xtor_ar_chan_data_len <= 8'd000;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd13: begin
                     if (conf_done && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_100_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1)))) begin
                        axi_initiator_xtor_ar_chan_data_len <= apb_axi_esp_adapter_t_Sub_8Ux1U_8S_4_123_out1;
                     end
                  end
                  
                  4'd01: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1)) begin
                        axi_initiator_xtor_ar_chan_data_len <= apb_axi_esp_adapter_t_Sub_8Ux1U_8S_4_123_out1;
                     end
                  end
                  
                  4'd02: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1) begin
                        axi_initiator_xtor_ar_chan_data_len <= s_reg_27;
                     end
                  end
                  
                  4'd05: begin
                     if (32'd0000000000 != s_reg_26 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1) begin
                        axi_initiator_xtor_ar_chan_data_len <= apb_axi_esp_adapter_t_Sub_8Ux1U_8S_4_123_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_1
         always @(posedge clk)
          begin :drive_axi_initiator_xtor_ar_chan_data_size
            if (reset == 1'b0) begin
               axi_initiator_xtor_ar_chan_data_size_slice <= 1'b0;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd13: begin
                     if (conf_done && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_100_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1)))) begin
                        axi_initiator_xtor_ar_chan_data_size_slice <= 1'b1;
                     end
                  end
                  
                  4'd01: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1)) begin
                        axi_initiator_xtor_ar_chan_data_size_slice <= 1'b1;
                     end
                  end
                  
                  4'd02: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1) begin
                        axi_initiator_xtor_ar_chan_data_size_slice <= 1'b1;
                     end
                  end
                  
                  4'd05: begin
                     if (32'd0000000000 != s_reg_26 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1) begin
                        axi_initiator_xtor_ar_chan_data_size_slice <= 1'b1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i
         // resource: regr_2
         always @(posedge clk)
          begin :drive_axi_initiator_xtor_ar_chan_data_tid
            if (reset == 1'b0) begin
               axi_initiator_xtor_ar_chan_data_tid <= 2'd0;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd13: begin
                     if (conf_done && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_100_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1)))) begin
                        axi_initiator_xtor_ar_chan_data_tid <= 2'd1;
                     end
                  end
                  
                  4'd01: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1)) begin
                        axi_initiator_xtor_ar_chan_data_tid <= 2'd1;
                     end
                  end
                  
                  4'd02: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1) begin
                        axi_initiator_xtor_ar_chan_data_tid <= s_reg_24;
                     end
                  end
                  
                  4'd05: begin
                     if (32'd0000000000 != s_reg_26 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1) begin
                        axi_initiator_xtor_ar_chan_data_tid <= s_reg_29;
                     end
                  end
                  
               endcase

            end
         end

         // resource: mux_32bx3i
         // resource: regr_32
         always @(posedge clk)
          begin :drive_axi_initiator_xtor_ar_chan_data_addr
            if (reset == 1'b0) begin
               axi_initiator_xtor_ar_chan_data_addr <= 32'd0000000000;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd13: begin
                     if (conf_done && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_100_out1 && (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1)))) begin
                        axi_initiator_xtor_ar_chan_data_addr <= apb_axi_esp_adapter_t_N_Mux_32_2_0_4_118_out1;
                     end
                  end
                  
                  4'd01: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1 && (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1)) begin
                        axi_initiator_xtor_ar_chan_data_addr <= apb_axi_esp_adapter_t_N_Mux_32_2_0_4_118_out1;
                     end
                  end
                  
                  4'd02: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1) begin
                        axi_initiator_xtor_ar_chan_data_addr <= s_reg_23;
                     end
                  end
                  
                  4'd05: begin
                     if (32'd0000000000 != s_reg_26 && apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1) begin
                        axi_initiator_xtor_ar_chan_data_addr <= s_reg_28;
                     end
                  end
                  
               endcase

            end
         end

         // resource: mux_32bx2i
         // resource: regr_32
         always @(posedge clk)
          begin :drive_s_reg_23
            if (reset == 1'b0) begin
               s_reg_23 <= 32'd0000000000;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd01, 4'd13: begin
                     if (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1) begin
                        s_reg_23 <= apb_axi_esp_adapter_t_N_Mux_32_2_0_4_118_out1;
                     end
                  end
                  
                  4'd05: begin
                     if (32'd0000000000 != s_reg_26) begin
                        s_reg_23 <= s_reg_28;
                     end
                  end
                  
               endcase

            end
         end

         // resource: mux_2bx2i
         // resource: regr_2
         always @(posedge clk)
          begin :drive_s_reg_24
            if (reset == 1'b0) begin
               s_reg_24 <= 2'd0;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd01, 4'd13: begin
                     if (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1) begin
                        s_reg_24 <= 2'd1;
                     end
                  end
                  
                  4'd05: begin
                     if (32'd0000000000 != s_reg_26) begin
                        s_reg_24 <= s_reg_29;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_32
         always @(posedge clk)
          begin :drive_s_reg_25
            if (reset == 1'b0) begin
               s_reg_25 <= 32'd0000000000;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd01, 4'd13: begin
                     if (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1) begin
                        if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1) begin
                           if (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_1_4_121_out1) begin
                              s_reg_25 <= apb_axi_esp_adapter_t_N_Mux_32_2_1_4_121_out1;
                           end
                        end
                        else begin
                           s_reg_25 <= apb_axi_esp_adapter_t_N_Mux_32_2_1_4_121_out1;
                        end
                     end
                  end
                  
                  4'd05: begin
                     if (32'd0000000000 != s_reg_26) begin
                        if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1) begin
                           if (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_1_4_121_out1) begin
                              s_reg_25 <= apb_axi_esp_adapter_t_N_Mux_32_2_1_4_121_out1;
                           end
                        end
                        else begin
                           s_reg_25 <= apb_axi_esp_adapter_t_N_Mux_32_2_1_4_121_out1;
                        end
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_32
         always @(posedge clk)
          begin :drive_s_reg_26
            if (reset == 1'b0) begin
               s_reg_26 <= 32'd0000000000;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd01, 4'd13: begin
                     if (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1) begin
                        s_reg_26 <= apb_axi_esp_adapter_t_Sub_32Ux32U_32U_4_122_out1;
                     end
                  end
                  
                  4'd05: begin
                     if (32'd0000000000 != s_reg_26) begin
                        s_reg_26 <= apb_axi_esp_adapter_t_Sub_32Ux32U_32U_4_122_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_8
         always @(posedge clk)
          begin :drive_s_reg_27
            if (reset == 1'b0) begin
               s_reg_27 <= 8'd000;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd01, 4'd13: begin
                     if (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1) begin
                        s_reg_27 <= apb_axi_esp_adapter_t_Sub_8Ux1U_8S_4_123_out1;
                     end
                  end
                  
                  4'd05: begin
                     if (32'd0000000000 != s_reg_26) begin
                        s_reg_27 <= apb_axi_esp_adapter_t_Sub_8Ux1U_8S_4_123_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_32
         always @(posedge clk)
          begin :drive_s_reg_28
            if (reset == 1'b0) begin
               s_reg_28 <= 32'd0000000000;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd01, 4'd13: begin
                     if (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1) begin
                        s_reg_28 <= apb_axi_esp_adapter_t_Add_32Ux32U_32U_4_124_out1;
                     end
                  end
                  
                  4'd05: begin
                     if (32'd0000000000 != s_reg_26) begin
                        s_reg_28 <= apb_axi_esp_adapter_t_Add_32Ux32U_32U_4_124_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_2
         always @(posedge clk)
          begin :drive_s_reg_29
            if (reset == 1'b0) begin
               s_reg_29 <= 2'd0;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd01, 4'd13: begin
                     if (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1) begin
                        s_reg_29 <= apb_axi_esp_adapter_t_Add_2Ux2U_2U_4_125_out1;
                     end
                  end
                  
                  4'd05: begin
                     if (32'd0000000000 != s_reg_26) begin
                        s_reg_29 <= apb_axi_esp_adapter_t_Add_2Ux2U_2U_4_125_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_32
         always @(posedge clk)
          begin :drive_s_reg_30
            if (reset == 1'b0) begin
               s_reg_30 <= 32'd0000000000;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd01, 4'd13: begin
                     if (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 && 32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_1_4_121_out1) begin
                        s_reg_30 <= apb_axi_esp_adapter_t_Add_32Ux2S_32S_4_127_out1;
                     end
                  end
                  
                  4'd02: begin
                     if (32'd0000000000 != s_reg_25) begin
                        s_reg_30 <= apb_axi_esp_adapter_t_Add_32Ux2S_32S_4_127_out1;
                     end
                  end
                  
                  4'd04: begin
                     if (dma_read_chnl_ready) begin
                        s_reg_30 <= apb_axi_esp_adapter_t_Add_32Ux2S_32S_4_127_out1;
                     end
                  end
                  
                  4'd05: begin
                     if (32'd0000000000 != s_reg_26 && 32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_1_4_121_out1) begin
                        s_reg_30 <= apb_axi_esp_adapter_t_Add_32Ux2S_32S_4_127_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: mux_32bx2i
         // resource: regr_32
         always @(posedge clk)
          begin :drive_s_reg_31
            if (reset == 1'b0) begin
               s_reg_31 <= 32'd0000000000;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd01, 4'd05, 4'd06, 4'd13: begin
                     if (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1) begin
                        if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1) begin
                           case (apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1) 

                              32'd0000000000: begin
                                 s_reg_31 <= apb_axi_esp_adapter_t_Add_32Ux32U_32U_4_147_out1;
                              end
                              
                              default: begin
                                 s_reg_31 <= apb_axi_esp_adapter_t_N_Mux_32_2_0_4_132_out1;
                              end
                              
                           endcase

                        end
                        else begin
                           s_reg_31 <= apb_axi_esp_adapter_t_N_Mux_32_2_0_4_132_out1;
                        end
                     end
                  end
                  
                  4'd07: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1) begin
                        if (32'd0000000000 == s_reg_34) begin
                           s_reg_31 <= apb_axi_esp_adapter_t_Add_32Ux32U_32U_4_147_out1;
                        end
                     end
                  end
                  
                  4'd08: begin
                     if (dma_write_chnl_valid) begin
                        if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_51_out1) begin
                           if (apb_axi_esp_adapter_t_LessThan_32Ux32U_1U_4_141_out1) begin
                           end
                           else begin
                              s_reg_31 <= apb_axi_esp_adapter_t_Add_32Ux32U_32U_4_147_out1;
                           end
                        end
                     end
                  end
                  
                  4'd09: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_51_out1) begin
                        if (s_reg_40) begin
                        end
                        else begin
                           s_reg_31 <= apb_axi_esp_adapter_t_Add_32Ux32U_32U_4_147_out1;
                        end
                     end
                  end
                  
                  4'd10: begin
                     s_reg_31 <= apb_axi_esp_adapter_t_Add_32Ux32U_32U_4_147_out1;
                  end
                  
                  4'd11: begin
                     if (32'd0000000000 != s_reg_42) begin
                        if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1) begin
                           if (32'd0000000000 == apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1) begin
                              s_reg_31 <= apb_axi_esp_adapter_t_Add_32Ux32U_32U_4_147_out1;
                           end
                        end
                     end
                  end
                  
               endcase

            end
         end

         // resource: mux_2bx2i
         // resource: regr_2
         always @(posedge clk)
          begin :drive_s_reg_32
            if (reset == 1'b0) begin
               s_reg_32 <= 2'd0;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd01, 4'd05, 4'd06, 4'd13: begin
                     if (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1) begin
                        if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1) begin
                           case (apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1) 

                              32'd0000000000: begin
                                 s_reg_32 <= apb_axi_esp_adapter_t_Add_2Ux1U_2U_4_148_out1;
                              end
                              
                              default: begin
                                 s_reg_32 <= 2'd1;
                              end
                              
                           endcase

                        end
                        else begin
                           s_reg_32 <= 2'd1;
                        end
                     end
                  end
                  
                  4'd07: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1) begin
                        if (32'd0000000000 == s_reg_34) begin
                           s_reg_32 <= apb_axi_esp_adapter_t_Add_2Ux1U_2U_4_148_out1;
                        end
                     end
                  end
                  
                  4'd08: begin
                     if (dma_write_chnl_valid) begin
                        if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_51_out1) begin
                           if (apb_axi_esp_adapter_t_LessThan_32Ux32U_1U_4_141_out1) begin
                           end
                           else begin
                              s_reg_32 <= apb_axi_esp_adapter_t_Add_2Ux1U_2U_4_148_out1;
                           end
                        end
                     end
                  end
                  
                  4'd09: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_51_out1) begin
                        if (s_reg_40) begin
                        end
                        else begin
                           s_reg_32 <= apb_axi_esp_adapter_t_Add_2Ux1U_2U_4_148_out1;
                        end
                     end
                  end
                  
                  4'd10: begin
                     s_reg_32 <= apb_axi_esp_adapter_t_Add_2Ux1U_2U_4_148_out1;
                  end
                  
                  4'd11: begin
                     if (32'd0000000000 != s_reg_42) begin
                        if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1) begin
                           if (32'd0000000000 == apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1) begin
                              s_reg_32 <= apb_axi_esp_adapter_t_Add_2Ux1U_2U_4_148_out1;
                           end
                        end
                     end
                  end
                  
               endcase

            end
         end

         // resource: mux_32bx2i
         // resource: regr_32
         always @(posedge clk)
          begin :drive_s_reg_33
            if (reset == 1'b0) begin
               s_reg_33 <= 32'd0000000000;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd01, 4'd05, 4'd06, 4'd13: begin
                     if (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1) begin
                        if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1) begin
                           case (apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1) 

                              32'd0000000000: begin
                                 s_reg_33 <= apb_axi_esp_adapter_t_N_Mux_32_2_0_4_146_out1;
                              end
                              
                              default: begin
                                 s_reg_33 <= apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1;
                              end
                              
                           endcase

                        end
                        else begin
                           s_reg_33 <= apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1;
                        end
                     end
                  end
                  
                  4'd07: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1) begin
                        if (32'd0000000000 == s_reg_34) begin
                           s_reg_33 <= apb_axi_esp_adapter_t_N_Mux_32_2_0_4_146_out1;
                        end
                     end
                  end
                  
                  4'd08: begin
                     if (dma_write_chnl_valid) begin
                        if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_51_out1) begin
                           if (apb_axi_esp_adapter_t_LessThan_32Ux32U_1U_4_141_out1) begin
                           end
                           else begin
                              s_reg_33 <= apb_axi_esp_adapter_t_N_Mux_32_2_0_4_146_out1;
                           end
                        end
                     end
                  end
                  
                  4'd09: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_51_out1) begin
                        if (s_reg_40) begin
                        end
                        else begin
                           s_reg_33 <= apb_axi_esp_adapter_t_N_Mux_32_2_0_4_146_out1;
                        end
                     end
                  end
                  
                  4'd10: begin
                     s_reg_33 <= apb_axi_esp_adapter_t_N_Mux_32_2_0_4_146_out1;
                  end
                  
                  4'd11: begin
                     if (32'd0000000000 != s_reg_42) begin
                        if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1) begin
                           if (32'd0000000000 == apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1) begin
                              s_reg_33 <= apb_axi_esp_adapter_t_N_Mux_32_2_0_4_146_out1;
                           end
                        end
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_32
         always @(posedge clk)
          begin :drive_s_reg_34
            if (reset == 1'b0) begin
               s_reg_34 <= 32'd0000000000;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd01, 4'd05, 4'd06, 4'd13: begin
                     if (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1) begin
                        s_reg_34 <= apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1;
                     end
                  end
                  
                  4'd11: begin
                     if (32'd0000000000 != s_reg_42) begin
                        s_reg_34 <= apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_8
         always @(posedge clk)
          begin :drive_s_reg_35
            if (reset == 1'b0) begin
               s_reg_35 <= 8'd000;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd01, 4'd05, 4'd06, 4'd13: begin
                     if (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1) begin
                        s_reg_35 <= apb_axi_esp_adapter_t_Sub_8Ux1U_8S_4_136_out1;
                     end
                  end
                  
                  4'd11: begin
                     if (32'd0000000000 != s_reg_42) begin
                        s_reg_35 <= apb_axi_esp_adapter_t_Sub_8Ux1U_8S_4_136_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_32
         always @(posedge clk)
          begin :drive_s_reg_36
            if (reset == 1'b0) begin
               s_reg_36 <= 32'd0000000000;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd01, 4'd05, 4'd06, 4'd13: begin
                     if (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1) begin
                        if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1) begin
                           if (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1) begin
                              s_reg_36 <= apb_axi_esp_adapter_t_Sub_32Ux1U_32S_4_137_out1;
                           end
                        end
                        else begin
                           s_reg_36 <= apb_axi_esp_adapter_t_Sub_32Ux1U_32S_4_137_out1;
                        end
                     end
                  end
                  
                  4'd11: begin
                     if (32'd0000000000 != s_reg_42) begin
                        if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1) begin
                           if (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1) begin
                              s_reg_36 <= apb_axi_esp_adapter_t_Sub_32Ux1U_32S_4_137_out1;
                           end
                        end
                        else begin
                           s_reg_36 <= apb_axi_esp_adapter_t_Sub_32Ux1U_32S_4_137_out1;
                        end
                     end
                  end
                  
               endcase

            end
         end

         // resource: mux_32bx2i
         // resource: regr_32
         always @(posedge clk)
          begin :drive_s_reg_37
            if (reset == 1'b0) begin
               s_reg_37 <= 32'd0000000000;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd01, 4'd05, 4'd06, 4'd13: begin
                     if (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && 32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1) begin
                        s_reg_37 <= 32'd0000000000;
                     end
                  end
                  
                  4'd07: begin
                     if (32'd0000000000 != s_reg_34) begin
                        s_reg_37 <= 32'd0000000000;
                     end
                  end
                  
                  4'd08: begin
                     if (dma_write_chnl_valid) begin
                        s_reg_37 <= s_reg_38;
                     end
                  end
                  
                  4'd09: begin
                     s_reg_37 <= s_reg_38;
                  end
                  
                  4'd11: begin
                     if (32'd0000000000 != s_reg_42 && 32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1) begin
                        s_reg_37 <= 32'd0000000000;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_32
         always @(posedge clk)
          begin :drive_s_reg_38
            if (reset == 1'b0) begin
               s_reg_38 <= 32'd0000000000;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd01, 4'd05, 4'd06, 4'd13: begin
                     if (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 && 32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1) begin
                        s_reg_38 <= apb_axi_esp_adapter_t_Add_32Ux2S_32S_4_139_out1;
                     end
                  end
                  
                  4'd07: begin
                     if (32'd0000000000 != s_reg_34) begin
                        s_reg_38 <= apb_axi_esp_adapter_t_Add_32Ux2S_32S_4_139_out1;
                     end
                  end
                  
                  4'd08: begin
                     if (dma_write_chnl_valid) begin
                        if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_51_out1) begin
                           s_reg_38 <= apb_axi_esp_adapter_t_Add_32Ux2S_32S_4_139_out1;
                        end
                     end
                  end
                  
                  4'd09: begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_51_out1) begin
                        s_reg_38 <= apb_axi_esp_adapter_t_Add_32Ux2S_32S_4_139_out1;
                     end
                  end
                  
                  4'd11: begin
                     if (32'd0000000000 != s_reg_42 && 32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1) begin
                        s_reg_38 <= apb_axi_esp_adapter_t_Add_32Ux2S_32S_4_139_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_1
         always @(posedge clk)
          begin :drive_s_reg_39
            if (reset == 1'b0) begin
               s_reg_39 <= 1'b0;
            end
            else begin
               case (global_state) 

                  4'd08: begin
                     s_reg_39 <= apb_axi_esp_adapter_t_Equal_32Sx32U_1U_4_140_out1;
                  end
                  
               endcase

            end
         end

         // resource: regr_1
         always @(posedge clk)
          begin :drive_s_reg_40
            if (reset == 1'b0) begin
               s_reg_40 <= 1'b0;
            end
            else begin
               case (global_state) 

                  4'd08: begin
                     s_reg_40 <= apb_axi_esp_adapter_t_LessThan_32Ux32U_1U_4_141_out1;
                  end
                  
               endcase

            end
         end

         // resource: regr_32
         always @(posedge clk)
          begin :drive_s_reg_41
            if (reset == 1'b0) begin
               s_reg_41 <= 32'd0000000000;
            end
            else begin
               case (global_state) 

                  4'd08: begin
                     s_reg_41 <= dma_write_chnl_data;
                  end
                  
               endcase

            end
         end

         // resource: regr_32
         always @(posedge clk)
          begin :drive_s_reg_42
            if (reset == 1'b0) begin
               s_reg_42 <= 32'd0000000000;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd01, 4'd05, 4'd06, 4'd13: begin
                     if (32'd0000000000 != apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1) begin
                        s_reg_42 <= apb_axi_esp_adapter_t_Sub_32Ux32U_32U_4_144_out1;
                     end
                  end
                  
                  4'd07, 4'd08, 4'd09, 4'd10: begin
                     s_reg_42 <= apb_axi_esp_adapter_t_Sub_32Ux32U_32U_4_144_out1;
                  end
                  
                  4'd11: begin
                     if (32'd0000000000 != s_reg_42) begin
                        s_reg_42 <= apb_axi_esp_adapter_t_Sub_32Ux32U_32U_4_144_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource:apb_axi_esp_adapter_t_N_Mux_32_2_0_4
         always @(dma_read_ctrl_ready or dma_read_ctrl_data_length or dma_read_ctrl_data_buf_length)
          begin :apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117
            if (dma_read_ctrl_ready) begin
               apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 = dma_read_ctrl_data_length;
            end
            else begin
               apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 = dma_read_ctrl_data_buf_length;
            end
         end

         // resource:apb_axi_esp_adapter_t_N_Mux_32_2_0_4
         always @(dma_read_ctrl_ready or dma_read_ctrl_data_index or dma_read_ctrl_data_buf_index)
          begin :apb_axi_esp_adapter_t_N_Mux_32_2_0_4_118
            if (dma_read_ctrl_ready) begin
               apb_axi_esp_adapter_t_N_Mux_32_2_0_4_118_out1 = dma_read_ctrl_data_index;
            end
            else begin
               apb_axi_esp_adapter_t_N_Mux_32_2_0_4_118_out1 = dma_read_ctrl_data_buf_index;
            end
         end

         // resource: mux_1bx2i
         always @(dma_read_ctrl_set_ready_curr or axi_initiator_xtor_w_set_valid_curr or gs_ctrl0)
          begin :drive_apb_axi_esp_adapter_t_Not_1U_1U_4_119_in1
            if (gs_ctrl0) begin
               apb_axi_esp_adapter_t_Not_1U_1U_4_119_in1 = axi_initiator_xtor_w_set_valid_curr;
            end
            else begin
               apb_axi_esp_adapter_t_Not_1U_1U_4_119_in1 = dma_read_ctrl_set_ready_curr;
            end
         end

         // resource: apb_axi_esp_adapter_t_Not_1U_1U_4  instance: apb_axi_esp_adapter_t_Not_1U_1U_4_119
         assign apb_axi_esp_adapter_t_Not_1U_1U_4_119_out1 = !apb_axi_esp_adapter_t_Not_1U_1U_4_119_in1;

         // resource: mux_28bx2i
         always @(s_reg_26[31:4] or apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1[31:4] or gs_ctrl1)
          begin :drive_apb_axi_esp_adapter_t_OrReduction_28U_1U_4_120_in1
            if (gs_ctrl1) begin
               apb_axi_esp_adapter_t_OrReduction_28U_1U_4_120_in1 = s_reg_26[31:4];
            end
            else begin
               apb_axi_esp_adapter_t_OrReduction_28U_1U_4_120_in1 = apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1[31:4];
            end
         end

         // resource: apb_axi_esp_adapter_t_OrReduction_28U_1U_4  instance: apb_axi_esp_adapter_t_OrReduction_28U_1U_4_120
         assign apb_axi_esp_adapter_t_OrReduction_28U_1U_4_120_out1 = (|apb_axi_esp_adapter_t_OrReduction_28U_1U_4_120_in1);

         // resource: mux_32bx2i
         always @(s_reg_26 or apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 or gs_ctrl1)
          begin :drive_apb_axi_esp_adapter_t_N_Mux_32_2_1_4_121_in2
            if (gs_ctrl1) begin
               apb_axi_esp_adapter_t_N_Mux_32_2_1_4_121_in2 = s_reg_26;
            end
            else begin
               apb_axi_esp_adapter_t_N_Mux_32_2_1_4_121_in2 = apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1;
            end
         end

         // resource:apb_axi_esp_adapter_t_N_Mux_32_2_1_4
         always @(apb_axi_esp_adapter_t_OrReduction_28U_1U_4_120_out1 or apb_axi_esp_adapter_t_N_Mux_32_2_1_4_121_in2)
          begin :apb_axi_esp_adapter_t_N_Mux_32_2_1_4_121
            if (apb_axi_esp_adapter_t_OrReduction_28U_1U_4_120_out1) begin
               apb_axi_esp_adapter_t_N_Mux_32_2_1_4_121_out1 = 32'd0000000016;
            end
            else begin
               apb_axi_esp_adapter_t_N_Mux_32_2_1_4_121_out1 = apb_axi_esp_adapter_t_N_Mux_32_2_1_4_121_in2;
            end
         end

         // resource: apb_axi_esp_adapter_t_Sub_32Ux32U_32U_4  instance: apb_axi_esp_adapter_t_Sub_32Ux32U_32U_4_122
         assign apb_axi_esp_adapter_t_Sub_32Ux32U_32U_4_122_out1 = apb_axi_esp_adapter_t_N_Mux_32_2_1_4_121_in2 - apb_axi_esp_adapter_t_N_Mux_32_2_1_4_121_out1;

         // resource: apb_axi_esp_adapter_t_Sub_8Ux1U_8S_4  instance: apb_axi_esp_adapter_t_Sub_8Ux1U_8S_4_123
         assign apb_axi_esp_adapter_t_Sub_8Ux1U_8S_4_123_out1 = apb_axi_esp_adapter_t_N_Mux_32_2_1_4_121_out1[7:0] - 8'd001;

         // resource: mux_32bx2i
         always @(s_reg_28 or apb_axi_esp_adapter_t_N_Mux_32_2_0_4_118_out1 or gs_ctrl1)
          begin :drive_apb_axi_esp_adapter_t_Add_32Ux32U_32U_4_124_in2
            if (gs_ctrl1) begin
               apb_axi_esp_adapter_t_Add_32Ux32U_32U_4_124_in2 = s_reg_28;
            end
            else begin
               apb_axi_esp_adapter_t_Add_32Ux32U_32U_4_124_in2 = apb_axi_esp_adapter_t_N_Mux_32_2_0_4_118_out1;
            end
         end

         // resource: apb_axi_esp_adapter_t_Add_32Ux32U_32U_4  instance: apb_axi_esp_adapter_t_Add_32Ux32U_32U_4_124
         assign apb_axi_esp_adapter_t_Add_32Ux32U_32U_4_124_out1 = apb_axi_esp_adapter_t_Add_32Ux32U_32U_4_124_in2 + apb_axi_esp_adapter_t_N_Mux_32_2_1_4_121_out1;

         // resource: mux_2bx2i
         always @(s_reg_29 or gs_ctrl1)
          begin :drive_apb_axi_esp_adapter_t_Add_2Ux2U_2U_4_125_in2
            if (gs_ctrl1) begin
               apb_axi_esp_adapter_t_Add_2Ux2U_2U_4_125_in2 = s_reg_29;
            end
            else begin
               apb_axi_esp_adapter_t_Add_2Ux2U_2U_4_125_in2 = 2'd1;
            end
         end

         // resource: apb_axi_esp_adapter_t_Add_2Ux2U_2U_4  instance: apb_axi_esp_adapter_t_Add_2Ux2U_2U_4_125
         assign apb_axi_esp_adapter_t_Add_2Ux2U_2U_4_125_out1 = apb_axi_esp_adapter_t_Add_2Ux2U_2U_4_125_in2 + 2'd1;

         // resource: apb_axi_esp_adapter_t_Not_1U_1U_4  instance: apb_axi_esp_adapter_t_Not_1U_1U_4_126
         assign apb_axi_esp_adapter_t_Not_1U_1U_4_126_out1 = !axi_initiator_xtor_ar_set_valid_curr;

         // resource: mux_32bx2i
         always @(s_reg_30 or gs_ctrl6)
          begin :drive_apb_axi_esp_adapter_t_Add_32Ux2S_32S_4_127_in2
            if (gs_ctrl6) begin
               apb_axi_esp_adapter_t_Add_32Ux2S_32S_4_127_in2 = s_reg_30;
            end
            else begin
               apb_axi_esp_adapter_t_Add_32Ux2S_32S_4_127_in2 = 32'd0000000000;
            end
         end

         // resource: apb_axi_esp_adapter_t_Add_32Ux2S_32S_4  instance: apb_axi_esp_adapter_t_Add_32Ux2S_32S_4_127
         assign apb_axi_esp_adapter_t_Add_32Ux2S_32S_4_127_out1 = apb_axi_esp_adapter_t_Add_32Ux2S_32S_4_127_in2 + 32'd0000000001;

         // resource: apb_axi_esp_adapter_t_Not_1U_1U_4  instance: apb_axi_esp_adapter_t_Not_1U_1U_4_128
         assign apb_axi_esp_adapter_t_Not_1U_1U_4_128_out1 = !axi_initiator_xtor_r_set_ready_curr;

         // resource:apb_axi_esp_adapter_t_N_Mux_32_2_0_4
         always @(axi_initiator_RDATA or axi_initiator_xtor_r_data_buf_data or apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_65_out1)
          begin :apb_axi_esp_adapter_t_N_Mux_32_2_0_4_129
            if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_65_out1) begin
               apb_axi_esp_adapter_t_N_Mux_32_2_0_4_129_out1 = axi_initiator_RDATA;
            end
            else begin
               apb_axi_esp_adapter_t_N_Mux_32_2_0_4_129_out1 = axi_initiator_xtor_r_data_buf_data;
            end
         end

         // resource: apb_axi_esp_adapter_t_LessThan_32Ux32U_1U_4  instance: apb_axi_esp_adapter_t_LessThan_32Ux32U_1U_4_130
         assign apb_axi_esp_adapter_t_LessThan_32Ux32U_1U_4_130_out1 = s_reg_30 < s_reg_25;

         // resource:apb_axi_esp_adapter_t_N_Mux_32_2_0_4
         always @(dma_write_ctrl_ready or dma_write_ctrl_data_length or dma_write_ctrl_data_buf_length)
          begin :apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131
            if (dma_write_ctrl_ready) begin
               apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 = dma_write_ctrl_data_length;
            end
            else begin
               apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 = dma_write_ctrl_data_buf_length;
            end
         end

         // resource:apb_axi_esp_adapter_t_N_Mux_32_2_0_4
         always @(dma_write_ctrl_ready or dma_write_ctrl_data_index or dma_write_ctrl_data_buf_index)
          begin :apb_axi_esp_adapter_t_N_Mux_32_2_0_4_132
            if (dma_write_ctrl_ready) begin
               apb_axi_esp_adapter_t_N_Mux_32_2_0_4_132_out1 = dma_write_ctrl_data_index;
            end
            else begin
               apb_axi_esp_adapter_t_N_Mux_32_2_0_4_132_out1 = dma_write_ctrl_data_buf_index;
            end
         end

         // resource: apb_axi_esp_adapter_t_Not_1U_1U_4  instance: apb_axi_esp_adapter_t_Not_1U_1U_4_133
         assign apb_axi_esp_adapter_t_Not_1U_1U_4_133_out1 = !dma_write_ctrl_set_ready_curr;

         // resource: mux_28bx2i
         always @(s_reg_33[31:4] or apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1[31:4] or gs_ctrl7)
          begin :drive_apb_axi_esp_adapter_t_OrReduction_28U_1U_4_134_in1
            if (gs_ctrl7) begin
               apb_axi_esp_adapter_t_OrReduction_28U_1U_4_134_in1 = s_reg_33[31:4];
            end
            else begin
               apb_axi_esp_adapter_t_OrReduction_28U_1U_4_134_in1 = apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1[31:4];
            end
         end

         // resource: apb_axi_esp_adapter_t_OrReduction_28U_1U_4  instance: apb_axi_esp_adapter_t_OrReduction_28U_1U_4_134
         assign apb_axi_esp_adapter_t_OrReduction_28U_1U_4_134_out1 = (|apb_axi_esp_adapter_t_OrReduction_28U_1U_4_134_in1);

         // resource: mux_32bx2i
         always @(s_reg_33 or apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 or gs_ctrl7)
          begin :drive_apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_in2
            if (gs_ctrl7) begin
               apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_in2 = s_reg_33;
            end
            else begin
               apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_in2 = apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1;
            end
         end

         // resource:apb_axi_esp_adapter_t_N_Mux_32_2_1_4
         always @(apb_axi_esp_adapter_t_OrReduction_28U_1U_4_134_out1 or apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_in2)
          begin :apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135
            if (apb_axi_esp_adapter_t_OrReduction_28U_1U_4_134_out1) begin
               apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1 = 32'd0000000016;
            end
            else begin
               apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1 = apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_in2;
            end
         end

         // resource: apb_axi_esp_adapter_t_Sub_8Ux1U_8S_4  instance: apb_axi_esp_adapter_t_Sub_8Ux1U_8S_4_136
         assign apb_axi_esp_adapter_t_Sub_8Ux1U_8S_4_136_out1 = apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1[7:0] - 8'd001;

         // resource: apb_axi_esp_adapter_t_Sub_32Ux1U_32S_4  instance: apb_axi_esp_adapter_t_Sub_32Ux1U_32S_4_137
         assign apb_axi_esp_adapter_t_Sub_32Ux1U_32S_4_137_out1 = apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1 - 32'd0000000001;

         // resource: apb_axi_esp_adapter_t_Not_1U_1U_4  instance: apb_axi_esp_adapter_t_Not_1U_1U_4_138
         assign apb_axi_esp_adapter_t_Not_1U_1U_4_138_out1 = !axi_initiator_xtor_aw_set_valid_curr;

         // resource: mux_32bx2i
         always @(s_reg_38 or gs_ctrl0)
          begin :drive_apb_axi_esp_adapter_t_Add_32Ux2S_32S_4_139_in2
            if (gs_ctrl0) begin
               apb_axi_esp_adapter_t_Add_32Ux2S_32S_4_139_in2 = s_reg_38;
            end
            else begin
               apb_axi_esp_adapter_t_Add_32Ux2S_32S_4_139_in2 = 32'd0000000000;
            end
         end

         // resource: apb_axi_esp_adapter_t_Add_32Ux2S_32S_4  instance: apb_axi_esp_adapter_t_Add_32Ux2S_32S_4_139
         assign apb_axi_esp_adapter_t_Add_32Ux2S_32S_4_139_out1 = apb_axi_esp_adapter_t_Add_32Ux2S_32S_4_139_in2 + 32'd0000000001;

         // resource: apb_axi_esp_adapter_t_Equal_32Sx32U_1U_4  instance: apb_axi_esp_adapter_t_Equal_32Sx32U_1U_4_140
         assign apb_axi_esp_adapter_t_Equal_32Sx32U_1U_4_140_out1 = s_reg_36 == s_reg_37;

         // resource: apb_axi_esp_adapter_t_LessThan_32Ux32U_1U_4  instance: apb_axi_esp_adapter_t_LessThan_32Ux32U_1U_4_141
         assign apb_axi_esp_adapter_t_LessThan_32Ux32U_1U_4_141_out1 = s_reg_38 < s_reg_34;

         // resource: apb_axi_esp_adapter_t_Not_1U_1U_4  instance: apb_axi_esp_adapter_t_Not_1U_1U_4_143
         assign apb_axi_esp_adapter_t_Not_1U_1U_4_143_out1 = !axi_initiator_xtor_b_set_ready_curr;

         // resource: mux_32bx2i
         always @(s_reg_33 or apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 or gs_ctrl10)
          begin :drive_apb_axi_esp_adapter_t_Sub_32Ux32U_32U_4_144_in2
            if (gs_ctrl10) begin
               apb_axi_esp_adapter_t_Sub_32Ux32U_32U_4_144_in2 = s_reg_33;
            end
            else begin
               apb_axi_esp_adapter_t_Sub_32Ux32U_32U_4_144_in2 = apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1;
            end
         end

         // resource: mux_32bx2i
         always @(s_reg_34 or apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1 or gs_ctrl11)
          begin :drive_apb_axi_esp_adapter_t_Sub_32Ux32U_32U_4_144_in1
            if (gs_ctrl11) begin
               apb_axi_esp_adapter_t_Sub_32Ux32U_32U_4_144_in1 = s_reg_34;
            end
            else begin
               apb_axi_esp_adapter_t_Sub_32Ux32U_32U_4_144_in1 = apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1;
            end
         end

         // resource: apb_axi_esp_adapter_t_Sub_32Ux32U_32U_4  instance: apb_axi_esp_adapter_t_Sub_32Ux32U_32U_4_144
         assign apb_axi_esp_adapter_t_Sub_32Ux32U_32U_4_144_out1 = apb_axi_esp_adapter_t_Sub_32Ux32U_32U_4_144_in2 - apb_axi_esp_adapter_t_Sub_32Ux32U_32U_4_144_in1;

         // resource:apb_axi_esp_adapter_t_N_Mux_32_2_2_4
         always @(apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_88_out1 or apb_axi_esp_adapter_t_Sub_32Ux32U_32U_4_144_in1)
          begin :apb_axi_esp_adapter_t_N_Mux_32_2_2_4_145
            if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_88_out1) begin
               apb_axi_esp_adapter_t_N_Mux_32_2_2_4_145_out1 = apb_axi_esp_adapter_t_Sub_32Ux32U_32U_4_144_in1;
            end
            else begin
               apb_axi_esp_adapter_t_N_Mux_32_2_2_4_145_out1 = 32'd0000000000;
            end
         end

         // resource:apb_axi_esp_adapter_t_N_Mux_32_2_0_4
         always @(apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_88_out1 or apb_axi_esp_adapter_t_Sub_32Ux32U_32U_4_144_in2 or apb_axi_esp_adapter_t_Sub_32Ux32U_32U_4_144_out1)
          begin :apb_axi_esp_adapter_t_N_Mux_32_2_0_4_146
            if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_88_out1) begin
               apb_axi_esp_adapter_t_N_Mux_32_2_0_4_146_out1 = apb_axi_esp_adapter_t_Sub_32Ux32U_32U_4_144_out1;
            end
            else begin
               apb_axi_esp_adapter_t_N_Mux_32_2_0_4_146_out1 = apb_axi_esp_adapter_t_Sub_32Ux32U_32U_4_144_in2;
            end
         end

         // resource: mux_32bx2i
         always @(s_reg_31 or apb_axi_esp_adapter_t_N_Mux_32_2_0_4_132_out1 or gs_ctrl10)
          begin :drive_apb_axi_esp_adapter_t_Add_32Ux32U_32U_4_147_in1
            if (gs_ctrl10) begin
               apb_axi_esp_adapter_t_Add_32Ux32U_32U_4_147_in1 = s_reg_31;
            end
            else begin
               apb_axi_esp_adapter_t_Add_32Ux32U_32U_4_147_in1 = apb_axi_esp_adapter_t_N_Mux_32_2_0_4_132_out1;
            end
         end

         // resource: apb_axi_esp_adapter_t_Add_32Ux32U_32U_4  instance: apb_axi_esp_adapter_t_Add_32Ux32U_32U_4_147
         assign apb_axi_esp_adapter_t_Add_32Ux32U_32U_4_147_out1 = apb_axi_esp_adapter_t_N_Mux_32_2_2_4_145_out1 + apb_axi_esp_adapter_t_Add_32Ux32U_32U_4_147_in1;

         // resource: mux_2bx2i
         always @(s_reg_32 or gs_ctrl10)
          begin :drive_apb_axi_esp_adapter_t_Add_2Ux1U_2U_4_148_in2
            if (gs_ctrl10) begin
               apb_axi_esp_adapter_t_Add_2Ux1U_2U_4_148_in2 = s_reg_32;
            end
            else begin
               apb_axi_esp_adapter_t_Add_2Ux1U_2U_4_148_in2 = 2'd1;
            end
         end

         // resource: apb_axi_esp_adapter_t_Add_2Ux1U_2U_4  instance: apb_axi_esp_adapter_t_Add_2Ux1U_2U_4_148
         assign apb_axi_esp_adapter_t_Add_2Ux1U_2U_4_148_out1 = apb_axi_esp_adapter_t_Add_2Ux1U_2U_4_148_in2 + {1'b0, apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_88_out1};

         // resource: regr_4
         always @(posedge clk)
          begin :drive_global_state
            if (reset == 1'b0) begin
               global_state <= 4'd00;
            end
            else begin
               global_state <= global_state_next;
            end
         end

         // resource: mux_4bx14i
         always @(dma_write_chnl_valid or dma_read_chnl_ready or conf_done or apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1 or apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_51_out1 or apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1 or apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_75_out1 or apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_88_out1 or apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_100_out1 or apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1 or apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1 or 
apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1
          or s_reg_25 or s_reg_26 or s_reg_34 or s_reg_40 or s_reg_42 or apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1 or apb_axi_esp_adapter_t_N_Mux_32_2_1_4_121_out1 or apb_axi_esp_adapter_t_LessThan_32Ux32U_1U_4_130_out1 or apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1 or apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1 or apb_axi_esp_adapter_t_LessThan_32Ux32U_1U_4_141_out1 or global_state)
          begin :drive_global_state_next
            case (global_state) 

               4'd00, 4'd13: begin
                  if (conf_done) begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_100_out1) begin
                        if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1) begin
                           case (apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1) 

                              32'd0000000000: begin
                                 if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1) begin
                                    if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1) begin
                                       case (apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1) 

                                          32'd0000000000: begin
                                             global_state_next = 4'd12;
                                          end
                                          
                                          default: begin
                                             if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1) begin
                                                case (apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1) 

                                                   32'd0000000000: begin
                                                      if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_88_out1) begin
                                                         global_state_next = 4'd11;
                                                      end
                                                      else begin
                                                         global_state_next = 4'd10;
                                                      end
                                                   end
                                                   
                                                   default: begin
                                                      global_state_next = 4'd08;
                                                   end
                                                   
                                                endcase

                                             end
                                             else begin
                                                global_state_next = 4'd07;
                                             end
                                          end
                                          
                                       endcase

                                    end
                                    else begin
                                       global_state_next = 4'd06;
                                    end
                                 end
                                 else begin
                                    global_state_next = 4'd12;
                                 end
                              end
                              
                              default: begin
                                 if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1) begin
                                    case (apb_axi_esp_adapter_t_N_Mux_32_2_1_4_121_out1) 

                                       32'd0000000000: begin
                                          global_state_next = 4'd05;
                                       end
                                       
                                       default: begin
                                          if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_75_out1) begin
                                             global_state_next = 4'd04;
                                          end
                                          else begin
                                             global_state_next = 4'd03;
                                          end
                                       end
                                       
                                    endcase

                                 end
                                 else begin
                                    global_state_next = 4'd02;
                                 end
                              end
                              
                           endcase

                        end
                        else begin
                           global_state_next = 4'd01;
                        end
                     end
                     else begin
                        if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1) begin
                           if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1) begin
                              case (apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1) 

                                 32'd0000000000: begin
                                    global_state_next = 4'd12;
                                 end
                                 
                                 default: begin
                                    if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1) begin
                                       case (apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1) 

                                          32'd0000000000: begin
                                             if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_88_out1) begin
                                                global_state_next = 4'd11;
                                             end
                                             else begin
                                                global_state_next = 4'd10;
                                             end
                                          end
                                          
                                          default: begin
                                             global_state_next = 4'd08;
                                          end
                                          
                                       endcase

                                    end
                                    else begin
                                       global_state_next = 4'd07;
                                    end
                                 end
                                 
                              endcase

                           end
                           else begin
                              global_state_next = 4'd06;
                           end
                        end
                        else begin
                           global_state_next = 4'd12;
                        end
                     end
                  end
                  else begin
                     global_state_next = 4'd13;
                  end
               end
               
               4'd01: begin
                  if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1) begin
                     case (apb_axi_esp_adapter_t_N_Mux_32_2_0_4_117_out1) 

                        32'd0000000000: begin
                           if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1) begin
                              if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1) begin
                                 case (apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1) 

                                    32'd0000000000: begin
                                       global_state_next = 4'd12;
                                    end
                                    
                                    default: begin
                                       if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1) begin
                                          case (apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1) 

                                             32'd0000000000: begin
                                                if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_88_out1) begin
                                                   global_state_next = 4'd11;
                                                end
                                                else begin
                                                   global_state_next = 4'd10;
                                                end
                                             end
                                             
                                             default: begin
                                                global_state_next = 4'd08;
                                             end
                                             
                                          endcase

                                       end
                                       else begin
                                          global_state_next = 4'd07;
                                       end
                                    end
                                    
                                 endcase

                              end
                              else begin
                                 global_state_next = 4'd06;
                              end
                           end
                           else begin
                              global_state_next = 4'd12;
                           end
                        end
                        
                        default: begin
                           if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1) begin
                              case (apb_axi_esp_adapter_t_N_Mux_32_2_1_4_121_out1) 

                                 32'd0000000000: begin
                                    global_state_next = 4'd05;
                                 end
                                 
                                 default: begin
                                    if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_75_out1) begin
                                       global_state_next = 4'd04;
                                    end
                                    else begin
                                       global_state_next = 4'd03;
                                    end
                                 end
                                 
                              endcase

                           end
                           else begin
                              global_state_next = global_state + 4'd01;
                           end
                        end
                        
                     endcase

                  end
                  else begin
                     global_state_next = 4'd01;
                  end
               end
               
               4'd02: begin
                  if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1) begin
                     case (s_reg_25) 

                        32'd0000000000: begin
                           global_state_next = 4'd05;
                        end
                        
                        default: begin
                           if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_75_out1) begin
                              global_state_next = 4'd04;
                           end
                           else begin
                              global_state_next = global_state + 4'd01;
                           end
                        end
                        
                     endcase

                  end
                  else begin
                     global_state_next = 4'd02;
                  end
               end
               
               4'd03: begin
                  if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_75_out1) begin
                     global_state_next = global_state + 4'd01;
                  end
                  else begin
                     global_state_next = 4'd03;
                  end
               end
               
               4'd04: begin
                  if (dma_read_chnl_ready) begin
                     if (apb_axi_esp_adapter_t_LessThan_32Ux32U_1U_4_130_out1) begin
                        if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_75_out1) begin
                           global_state_next = 4'd04;
                        end
                        else begin
                           global_state_next = 4'd03;
                        end
                     end
                     else begin
                        global_state_next = global_state + 4'd01;
                     end
                  end
                  else begin
                     global_state_next = 4'd04;
                  end
               end
               
               4'd05: begin
                  case (s_reg_26) 

                     32'd0000000000: begin
                        if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1) begin
                           if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1) begin
                              case (apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1) 

                                 32'd0000000000: begin
                                    global_state_next = 4'd12;
                                 end
                                 
                                 default: begin
                                    if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1) begin
                                       case (apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1) 

                                          32'd0000000000: begin
                                             if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_88_out1) begin
                                                global_state_next = 4'd11;
                                             end
                                             else begin
                                                global_state_next = 4'd10;
                                             end
                                          end
                                          
                                          default: begin
                                             global_state_next = 4'd08;
                                          end
                                          
                                       endcase

                                    end
                                    else begin
                                       global_state_next = 4'd07;
                                    end
                                 end
                                 
                              endcase

                           end
                           else begin
                              global_state_next = global_state + 4'd01;
                           end
                        end
                        else begin
                           global_state_next = 4'd12;
                        end
                     end
                     
                     default: begin
                        if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1) begin
                           case (apb_axi_esp_adapter_t_N_Mux_32_2_1_4_121_out1) 

                              32'd0000000000: begin
                                 global_state_next = 4'd05;
                              end
                              
                              default: begin
                                 if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_75_out1) begin
                                    global_state_next = 4'd04;
                                 end
                                 else begin
                                    global_state_next = 4'd03;
                                 end
                              end
                              
                           endcase

                        end
                        else begin
                           global_state_next = 4'd02;
                        end
                     end
                     
                  endcase

               end
               
               4'd06: begin
                  if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1) begin
                     case (apb_axi_esp_adapter_t_N_Mux_32_2_0_4_131_out1) 

                        32'd0000000000: begin
                           global_state_next = 4'd12;
                        end
                        
                        default: begin
                           if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1) begin
                              case (apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1) 

                                 32'd0000000000: begin
                                    if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_88_out1) begin
                                       global_state_next = 4'd11;
                                    end
                                    else begin
                                       global_state_next = 4'd10;
                                    end
                                 end
                                 
                                 default: begin
                                    global_state_next = 4'd08;
                                 end
                                 
                              endcase

                           end
                           else begin
                              global_state_next = global_state + 4'd01;
                           end
                        end
                        
                     endcase

                  end
                  else begin
                     global_state_next = 4'd06;
                  end
               end
               
               4'd07: begin
                  if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1) begin
                     case (s_reg_34) 

                        32'd0000000000: begin
                           if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_88_out1) begin
                              global_state_next = 4'd11;
                           end
                           else begin
                              global_state_next = 4'd10;
                           end
                        end
                        
                        default: begin
                           global_state_next = global_state + 4'd01;
                        end
                        
                     endcase

                  end
                  else begin
                     global_state_next = 4'd07;
                  end
               end
               
               4'd08: begin
                  if (dma_write_chnl_valid) begin
                     if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_51_out1) begin
                        if (apb_axi_esp_adapter_t_LessThan_32Ux32U_1U_4_141_out1) begin
                           global_state_next = 4'd08;
                        end
                        else begin
                           if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_88_out1) begin
                              global_state_next = 4'd11;
                           end
                           else begin
                              global_state_next = 4'd10;
                           end
                        end
                     end
                     else begin
                        global_state_next = global_state + 4'd01;
                     end
                  end
                  else begin
                     global_state_next = 4'd08;
                  end
               end
               
               4'd09: begin
                  if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_51_out1) begin
                     if (s_reg_40) begin
                        global_state_next = 4'd08;
                     end
                     else begin
                        if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_88_out1) begin
                           global_state_next = 4'd11;
                        end
                        else begin
                           global_state_next = global_state + 4'd01;
                        end
                     end
                  end
                  else begin
                     global_state_next = 4'd09;
                  end
               end
               
               4'd10: begin
                  if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_88_out1) begin
                     global_state_next = global_state + 4'd01;
                  end
                  else begin
                     global_state_next = 4'd10;
                  end
               end
               
               4'd11: begin
                  case (s_reg_42) 

                     32'd0000000000: begin
                        global_state_next = global_state + 4'd01;
                     end
                     
                     default: begin
                        if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1) begin
                           case (apb_axi_esp_adapter_t_N_Mux_32_2_1_4_135_out1) 

                              32'd0000000000: begin
                                 if (apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_88_out1) begin
                                    global_state_next = 4'd11;
                                 end
                                 else begin
                                    global_state_next = 4'd10;
                                 end
                              end
                              
                              default: begin
                                 global_state_next = 4'd08;
                              end
                              
                           endcase

                        end
                        else begin
                           global_state_next = 4'd07;
                        end
                     end
                     
                  endcase

               end
               
               default: begin
                  global_state_next = global_state + 4'd01;
               end
               
            endcase

         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl0
            if (reset == 1'b0) begin
               gs_ctrl0 <= 1'b0;
            end
            else begin
               case (global_state_next) 

                  4'd08, 4'd09: begin
                     gs_ctrl0 <= 1'b1;
                  end
                  
                  default: begin
                     gs_ctrl0 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl1
            if (reset == 1'b0) begin
               gs_ctrl1 <= 1'b0;
            end
            else begin
               case (global_state_next) 

                  4'd05: begin
                     gs_ctrl1 <= 1'b1;
                  end
                  
                  default: begin
                     gs_ctrl1 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl6
            if (reset == 1'b0) begin
               gs_ctrl6 <= 1'b0;
            end
            else begin
               case (global_state_next) 

                  4'd04: begin
                     gs_ctrl6 <= 1'b1;
                  end
                  
                  default: begin
                     gs_ctrl6 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl7
            if (reset == 1'b0) begin
               gs_ctrl7 <= 1'b0;
            end
            else begin
               case (global_state_next) 

                  4'd11: begin
                     gs_ctrl7 <= 1'b1;
                  end
                  
                  default: begin
                     gs_ctrl7 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl10
            if (reset == 1'b0) begin
               gs_ctrl10 <= 1'b0;
            end
            else begin
               case (global_state_next) 

                  4'd07, 4'd08, 4'd09, 4'd10, 4'd11: begin
                     gs_ctrl10 <= 1'b1;
                  end
                  
                  default: begin
                     gs_ctrl10 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl11
            if (reset == 1'b0) begin
               gs_ctrl11 <= 1'b0;
            end
            else begin
               case (global_state_next) 

                  4'd07, 4'd08, 4'd09, 4'd10: begin
                     gs_ctrl11 <= 1'b1;
                  end
                  
                  default: begin
                     gs_ctrl11 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_acc_rst
            if (reset == 1'b0) begin
               acc_rst <= 1'd0;
            end
            else begin
               case (global_state1) 

                  3'd1: begin
                     if (apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_1_out1) begin
                        acc_rst <= 1'd0;
                     end
                  end
                  
                  3'd2: begin
                     acc_rst <= 1'd1;
                  end
                  
               endcase

            end
         end

         // resource: regr_32
         always @(posedge clk)
          begin :drive_conf_info_offset_dout
            if (reset == 1'b0) begin
               conf_info_offset_dout <= 32'd0000000000;
            end
            else begin
               case (global_state1) 

                  3'd3: begin
                     conf_info_offset_dout <= offset_dout_sig;
                  end
                  
               endcase

            end
         end

         // resource: regr_32
         always @(posedge clk)
          begin :drive_conf_info_offset_din_2
            if (reset == 1'b0) begin
               conf_info_offset_din_2 <= 32'd0000000000;
            end
            else begin
               case (global_state1) 

                  3'd3: begin
                     conf_info_offset_din_2 <= offset_din2_sig;
                  end
                  
               endcase

            end
         end

         // resource: regr_32
         always @(posedge clk)
          begin :drive_conf_info_offset_din_1
            if (reset == 1'b0) begin
               conf_info_offset_din_1 <= 32'd0000000000;
            end
            else begin
               case (global_state1) 

                  3'd3: begin
                     conf_info_offset_din_1 <= offset_din1_sig;
                  end
                  
               endcase

            end
         end

         // resource: regr_32
         always @(posedge clk)
          begin :drive_conf_info_ncols
            if (reset == 1'b0) begin
               conf_info_ncols <= 32'd0000000000;
            end
            else begin
               case (global_state1) 

                  3'd3: begin
                     conf_info_ncols <= ncols_sig;
                  end
                  
               endcase

            end
         end

         // resource: regr_32
         always @(posedge clk)
          begin :drive_conf_info_nrows
            if (reset == 1'b0) begin
               conf_info_nrows <= 32'd0000000000;
            end
            else begin
               case (global_state1) 

                  3'd3: begin
                     conf_info_nrows <= nrows_sig;
                  end
                  
               endcase

            end
         end

         // resource: regr_32
         always @(posedge clk)
          begin :drive_conf_info_op
            if (reset == 1'b0) begin
               conf_info_op <= 32'd0000000000;
            end
            else begin
               case (global_state1) 

                  3'd3: begin
                     conf_info_op <= op_sig;
                  end
                  
               endcase

            end
         end

         // resource: regr_1
         always @(posedge clk)
          begin :drive_conf_done
            if (reset == 1'b0) begin
               conf_done <= 1'd0;
            end
            else begin
               case (global_state1) 

                  3'd3: begin
                     conf_done <= 1'd1;
                  end
                  
               endcase

            end
         end

         // resource: regr_1
         always @(posedge clk)
          begin :drive_apb_to_esp_done_toggle_sig
            if (reset == 1'b0) begin
               apb_to_esp_done_toggle_sig <= 1'd0;
            end
            else begin
               case (global_state1) 

                  3'd4: begin
                     if (acc_done) begin
                        apb_to_esp_done_toggle_sig <= apb_axi_esp_adapter_t_Not_1U_1U_4_2_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_1
         always @(posedge clk)
          begin :drive_s_reg_2
            if (reset == 1'b0) begin
               s_reg_2 <= 1'b0;
            end
            else begin
               case (global_state1) 

                  3'd0, 3'd4: begin
                     s_reg_2 <= apb_to_esp_start_toggle_sig;
                  end
                  
               endcase

            end
         end

         // resource: apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_1
         assign apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_1_out1 = apb_to_esp_start_toggle_sig ^ s_reg_2;

         // resource: apb_axi_esp_adapter_t_Not_1U_1U_4  instance: apb_axi_esp_adapter_t_Not_1U_1U_4_2
         assign apb_axi_esp_adapter_t_Not_1U_1U_4_2_out1 = !apb_to_esp_done_toggle_sig;

         // resource: regr_3
         always @(posedge clk)
          begin :drive_global_state1
            if (reset == 1'b0) begin
               global_state1 <= 3'd0;
            end
            else begin
               global_state1 <= global_state1_next;
            end
         end

         // resource: mux_3bx3i
         always @(acc_done or apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_1_out1 or global_state1)
          begin :drive_global_state1_next
            case (global_state1) 

               3'd1: begin
                  if (apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_1_out1) begin
                     global_state1_next = global_state1 + 3'd1;
                  end
                  else begin
                     global_state1_next = 3'd1;
                  end
               end
               
               3'd4: begin
                  if (acc_done) begin
                     global_state1_next = 3'd1;
                  end
                  else begin
                     global_state1_next = 3'd4;
                  end
               end
               
               default: begin
                  global_state1_next = global_state1 + 3'd1;
               end
               
            endcase

         end

         // resource: regr_1
         always @(posedge clk or negedge reset)
          begin :drive_apb_target_PSLVERR
            if (reset == 1'b0) begin
               apb_target_PSLVERR <= 1'd0;
            end
            else begin
               case (global_state2) 

                  2'd0, 2'd1: begin
                     if (apb_target_PSELX) begin
                        apb_target_PSLVERR <= apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_33_out1;
                     end
                  end
                  
                  2'd2: begin
                     if (!apb_target_PENABLE && apb_target_PSELX) begin
                        apb_target_PSLVERR <= apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_33_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_32
         always @(posedge clk or negedge reset)
          begin :drive_apb_target_PRDATA
            if (reset == 1'b0) begin
               apb_target_PRDATA <= 32'd0000000000;
            end
            else begin
               case (global_state2) 

                  2'd0, 2'd1: begin
                     if (apb_target_PSELX && apb_axi_esp_adapter_t_Not_1U_1U_4_10_out1) begin
                        apb_target_PRDATA <= apb_axi_esp_adapter_t_N_Mux_32_9_3_4_23_out1;
                     end
                  end
                  
                  2'd2: begin
                     if (!apb_target_PENABLE && (apb_target_PSELX && apb_axi_esp_adapter_t_Not_1U_1U_4_10_out1)) begin
                        apb_target_PRDATA <= apb_axi_esp_adapter_t_N_Mux_32_9_3_4_23_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_1
         always @(posedge clk or negedge reset)
          begin :drive_irq_reset_toggle_sig
            if (reset == 1'b0) begin
               irq_reset_toggle_sig <= 1'd0;
            end
            else begin
               case (global_state2) 

                  2'd0, 2'd1: begin
                     if (apb_target_PSELX && apb_axi_esp_adapter_t_And_1Ux1U_1U_4_13_out1) begin
                        irq_reset_toggle_sig <= apb_axi_esp_adapter_t_Not_1U_1U_4_32_out1;
                     end
                  end
                  
                  2'd2: begin
                     if (!apb_target_PENABLE && (apb_target_PSELX && apb_axi_esp_adapter_t_And_1Ux1U_1U_4_13_out1)) begin
                        irq_reset_toggle_sig <= apb_axi_esp_adapter_t_Not_1U_1U_4_32_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_1
         always @(posedge clk or negedge reset)
          begin :drive_apb_to_esp_start_toggle_sig
            if (reset == 1'b0) begin
               apb_to_esp_start_toggle_sig <= 1'd0;
            end
            else begin
               case (global_state2) 

                  2'd0, 2'd1: begin
                     if (apb_target_PSELX && apb_axi_esp_adapter_t_And_1Ux1U_1U_4_12_out1) begin
                        apb_to_esp_start_toggle_sig <= apb_axi_esp_adapter_t_Not_1U_1U_4_31_out1;
                     end
                  end
                  
                  2'd2: begin
                     if (!apb_target_PENABLE && (apb_target_PSELX && apb_axi_esp_adapter_t_And_1Ux1U_1U_4_12_out1)) begin
                        apb_to_esp_start_toggle_sig <= apb_axi_esp_adapter_t_Not_1U_1U_4_31_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_32
         always @(posedge clk or negedge reset)
          begin :drive_op_sig
            if (reset == 1'b0) begin
               op_sig <= 32'd0000000000;
            end
            else begin
               case (global_state2) 

                  2'd0, 2'd1: begin
                     if (apb_target_PSELX && apb_axi_esp_adapter_t_And_1Ux1U_1U_4_24_out1) begin
                        op_sig <= apb_target_PWDATA;
                     end
                  end
                  
                  2'd2: begin
                     if (!apb_target_PENABLE && (apb_target_PSELX && apb_axi_esp_adapter_t_And_1Ux1U_1U_4_24_out1)) begin
                        op_sig <= apb_target_PWDATA;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_32
         always @(posedge clk or negedge reset)
          begin :drive_nrows_sig
            if (reset == 1'b0) begin
               nrows_sig <= 32'd0000000000;
            end
            else begin
               case (global_state2) 

                  2'd0, 2'd1: begin
                     if (apb_target_PSELX && apb_axi_esp_adapter_t_And_1Ux1U_1U_4_25_out1) begin
                        nrows_sig <= apb_target_PWDATA;
                     end
                  end
                  
                  2'd2: begin
                     if (!apb_target_PENABLE && (apb_target_PSELX && apb_axi_esp_adapter_t_And_1Ux1U_1U_4_25_out1)) begin
                        nrows_sig <= apb_target_PWDATA;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_32
         always @(posedge clk or negedge reset)
          begin :drive_ncols_sig
            if (reset == 1'b0) begin
               ncols_sig <= 32'd0000000000;
            end
            else begin
               case (global_state2) 

                  2'd0, 2'd1: begin
                     if (apb_target_PSELX && apb_axi_esp_adapter_t_And_1Ux1U_1U_4_26_out1) begin
                        ncols_sig <= apb_target_PWDATA;
                     end
                  end
                  
                  2'd2: begin
                     if (!apb_target_PENABLE && (apb_target_PSELX && apb_axi_esp_adapter_t_And_1Ux1U_1U_4_26_out1)) begin
                        ncols_sig <= apb_target_PWDATA;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_32
         always @(posedge clk or negedge reset)
          begin :drive_offset_din1_sig
            if (reset == 1'b0) begin
               offset_din1_sig <= 32'd0000000000;
            end
            else begin
               case (global_state2) 

                  2'd0, 2'd1: begin
                     if (apb_target_PSELX && apb_axi_esp_adapter_t_And_1Ux1U_1U_4_27_out1) begin
                        offset_din1_sig <= apb_target_PWDATA;
                     end
                  end
                  
                  2'd2: begin
                     if (!apb_target_PENABLE && (apb_target_PSELX && apb_axi_esp_adapter_t_And_1Ux1U_1U_4_27_out1)) begin
                        offset_din1_sig <= apb_target_PWDATA;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_32
         always @(posedge clk or negedge reset)
          begin :drive_offset_din2_sig
            if (reset == 1'b0) begin
               offset_din2_sig <= 32'd0000000000;
            end
            else begin
               case (global_state2) 

                  2'd0, 2'd1: begin
                     if (apb_target_PSELX && apb_axi_esp_adapter_t_And_1Ux1U_1U_4_28_out1) begin
                        offset_din2_sig <= apb_target_PWDATA;
                     end
                  end
                  
                  2'd2: begin
                     if (!apb_target_PENABLE && (apb_target_PSELX && apb_axi_esp_adapter_t_And_1Ux1U_1U_4_28_out1)) begin
                        offset_din2_sig <= apb_target_PWDATA;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_32
         always @(posedge clk or negedge reset)
          begin :drive_offset_dout_sig
            if (reset == 1'b0) begin
               offset_dout_sig <= 32'd0000000000;
            end
            else begin
               case (global_state2) 

                  2'd0, 2'd1: begin
                     if (apb_target_PSELX && apb_axi_esp_adapter_t_And_1Ux1U_1U_4_29_out1) begin
                        offset_dout_sig <= apb_target_PWDATA;
                     end
                  end
                  
                  2'd2: begin
                     if (!apb_target_PENABLE && (apb_target_PSELX && apb_axi_esp_adapter_t_And_1Ux1U_1U_4_29_out1)) begin
                        offset_dout_sig <= apb_target_PWDATA;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_32
         always @(posedge clk or negedge reset)
          begin :drive_csr_sig
            if (reset == 1'b0) begin
               csr_sig <= 32'd0000000000;
            end
            else begin
               case (global_state2) 

                  2'd0, 2'd1: begin
                     if (apb_target_PSELX && apb_axi_esp_adapter_t_And_1Ux1U_1U_4_30_out1) begin
                        csr_sig <= apb_target_PWDATA;
                     end
                  end
                  
                  2'd2: begin
                     if (!apb_target_PENABLE && (apb_target_PSELX && apb_axi_esp_adapter_t_And_1Ux1U_1U_4_30_out1)) begin
                        csr_sig <= apb_target_PWDATA;
                     end
                  end
                  
               endcase

            end
         end

         // resource: apb_axi_esp_adapter_t_Equal_32Ux5U_1U_4  instance: apb_axi_esp_adapter_t_Equal_32Ux5U_1U_4_20
         assign apb_axi_esp_adapter_t_Equal_32Ux5U_1U_4_20_out1 = apb_target_PADDR == 32'd0000000024;

         // thread: drive_apb_axi_esp_adapter_t_Not_1U_1U_4_5_in1
         assign apb_axi_esp_adapter_t_Not_1U_1U_4_5_in1 = apb_target_PWDATA[4];

         // resource: apb_axi_esp_adapter_t_Not_1U_1U_4  instance: apb_axi_esp_adapter_t_Not_1U_1U_4_5
         assign apb_axi_esp_adapter_t_Not_1U_1U_4_5_out1 = !apb_axi_esp_adapter_t_Not_1U_1U_4_5_in1;

         // resource: apb_axi_esp_adapter_t_And_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_And_1Ux1U_1U_4_30
         assign apb_axi_esp_adapter_t_And_1Ux1U_1U_4_30_out1 = apb_axi_esp_adapter_t_Equal_32Ux5U_1U_4_20_out1 & apb_target_PWRITE;

         // resource: apb_axi_esp_adapter_t_And_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_And_1Ux1U_1U_4_8
         assign apb_axi_esp_adapter_t_And_1Ux1U_1U_4_8_out1 = apb_axi_esp_adapter_t_Not_1U_1U_4_5_out1 & irq;

         // resource: apb_axi_esp_adapter_t_Not_1U_1U_4  instance: apb_axi_esp_adapter_t_Not_1U_1U_4_10
         assign apb_axi_esp_adapter_t_Not_1U_1U_4_10_out1 = !apb_target_PWRITE;

         // resource: apb_axi_esp_adapter_t_OrReduction_32U_1U_4  instance: apb_axi_esp_adapter_t_OrReduction_32U_1U_4_11
         assign apb_axi_esp_adapter_t_OrReduction_32U_1U_4_11_out1 = (|apb_target_PADDR);

         // resource: apb_axi_esp_adapter_t_And_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_And_1Ux1U_1U_4_12
         assign apb_axi_esp_adapter_t_And_1Ux1U_1U_4_12_out1 = apb_axi_esp_adapter_t_And_1Ux1U_1U_4_30_out1 & apb_target_PWDATA[0];

         // resource: apb_axi_esp_adapter_t_And_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_And_1Ux1U_1U_4_13
         assign apb_axi_esp_adapter_t_And_1Ux1U_1U_4_13_out1 = apb_axi_esp_adapter_t_And_1Ux1U_1U_4_30_out1 & apb_axi_esp_adapter_t_And_1Ux1U_1U_4_8_out1;

         // resource: apb_axi_esp_adapter_t_Not_1U_1U_4  instance: apb_axi_esp_adapter_t_Not_1U_1U_4_14
         assign apb_axi_esp_adapter_t_Not_1U_1U_4_14_out1 = !apb_axi_esp_adapter_t_OrReduction_32U_1U_4_11_out1;

         // resource: apb_axi_esp_adapter_t_Equal_32Ux3U_1U_4  instance: apb_axi_esp_adapter_t_Equal_32Ux3U_1U_4_15
         assign apb_axi_esp_adapter_t_Equal_32Ux3U_1U_4_15_out1 = apb_target_PADDR == 32'd0000000004;

         // resource: apb_axi_esp_adapter_t_Equal_32Ux4U_1U_4  instance: apb_axi_esp_adapter_t_Equal_32Ux4U_1U_4_16
         assign apb_axi_esp_adapter_t_Equal_32Ux4U_1U_4_16_out1 = apb_target_PADDR == 32'd0000000008;

         // resource: apb_axi_esp_adapter_t_Equal_32Ux4U_1U_4  instance: apb_axi_esp_adapter_t_Equal_32Ux4U_1U_4_17
         assign apb_axi_esp_adapter_t_Equal_32Ux4U_1U_4_17_out1 = apb_target_PADDR == 32'd0000000012;

         // resource: apb_axi_esp_adapter_t_Equal_32Ux5U_1U_4  instance: apb_axi_esp_adapter_t_Equal_32Ux5U_1U_4_18
         assign apb_axi_esp_adapter_t_Equal_32Ux5U_1U_4_18_out1 = apb_target_PADDR == 32'd0000000016;

         // resource: apb_axi_esp_adapter_t_Equal_32Ux5U_1U_4  instance: apb_axi_esp_adapter_t_Equal_32Ux5U_1U_4_19
         assign apb_axi_esp_adapter_t_Equal_32Ux5U_1U_4_19_out1 = apb_target_PADDR == 32'd0000000020;

         // resource:apb_axi_esp_adapter_t_N_Muxb_1_8_4_4
         always @(apb_target_PADDR)
          begin :apb_axi_esp_adapter_t_N_Muxb_1_8_4_4_21
            case (apb_target_PADDR) 

               32'd0000000000, 32'd0000000004, 32'd0000000008, 32'd0000000012, 32'd0000000016, 32'd0000000020, 32'd0000000024: begin
                  apb_axi_esp_adapter_t_N_Muxb_1_8_4_4_21_out1 = 1'b0;
               end
               
               default: begin
                  apb_axi_esp_adapter_t_N_Muxb_1_8_4_4_21_out1 = 1'b1;
               end
               
            endcase

         end

         // resource:apb_axi_esp_adapter_t_N_Muxb_1_9_5_4
         always @(apb_target_PADDR)
          begin :apb_axi_esp_adapter_t_N_Muxb_1_9_5_4_22
            case (apb_target_PADDR) 

               32'd0000000000, 32'd0000000004, 32'd0000000008, 32'd0000000012, 32'd0000000016, 32'd0000000020, 32'd0000000024, 32'd0000000028: begin
                  apb_axi_esp_adapter_t_N_Muxb_1_9_5_4_22_out1 = 1'b0;
               end
               
               default: begin
                  apb_axi_esp_adapter_t_N_Muxb_1_9_5_4_22_out1 = 1'b1;
               end
               
            endcase

         end

         // resource:apb_axi_esp_adapter_t_N_Mux_32_9_3_4
         always @(apb_target_PADDR or op_sig or nrows_sig or ncols_sig or offset_din1_sig or offset_din2_sig or offset_dout_sig or csr_sig)
          begin :apb_axi_esp_adapter_t_N_Mux_32_9_3_4_23
            case (apb_target_PADDR) 

               32'd0000000000: begin
                  apb_axi_esp_adapter_t_N_Mux_32_9_3_4_23_out1 = op_sig;
               end
               
               32'd0000000004: begin
                  apb_axi_esp_adapter_t_N_Mux_32_9_3_4_23_out1 = nrows_sig;
               end
               
               32'd0000000008: begin
                  apb_axi_esp_adapter_t_N_Mux_32_9_3_4_23_out1 = ncols_sig;
               end
               
               32'd0000000012: begin
                  apb_axi_esp_adapter_t_N_Mux_32_9_3_4_23_out1 = offset_din1_sig;
               end
               
               32'd0000000016: begin
                  apb_axi_esp_adapter_t_N_Mux_32_9_3_4_23_out1 = offset_din2_sig;
               end
               
               32'd0000000020: begin
                  apb_axi_esp_adapter_t_N_Mux_32_9_3_4_23_out1 = offset_dout_sig;
               end
               
               32'd0000000024: begin
                  apb_axi_esp_adapter_t_N_Mux_32_9_3_4_23_out1 = csr_sig;
               end
               
               32'd0000000028: begin
                  apb_axi_esp_adapter_t_N_Mux_32_9_3_4_23_out1 = 32'd0000000001;
               end
               
               default: begin
                  apb_axi_esp_adapter_t_N_Mux_32_9_3_4_23_out1 = 32'd0000000000;
               end
               
            endcase

         end

         // resource: apb_axi_esp_adapter_t_And_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_And_1Ux1U_1U_4_24
         assign apb_axi_esp_adapter_t_And_1Ux1U_1U_4_24_out1 = apb_axi_esp_adapter_t_Not_1U_1U_4_14_out1 & apb_target_PWRITE;

         // resource: apb_axi_esp_adapter_t_And_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_And_1Ux1U_1U_4_25
         assign apb_axi_esp_adapter_t_And_1Ux1U_1U_4_25_out1 = apb_axi_esp_adapter_t_Equal_32Ux3U_1U_4_15_out1 & apb_target_PWRITE;

         // resource: apb_axi_esp_adapter_t_And_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_And_1Ux1U_1U_4_26
         assign apb_axi_esp_adapter_t_And_1Ux1U_1U_4_26_out1 = apb_axi_esp_adapter_t_Equal_32Ux4U_1U_4_16_out1 & apb_target_PWRITE;

         // resource: apb_axi_esp_adapter_t_And_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_And_1Ux1U_1U_4_27
         assign apb_axi_esp_adapter_t_And_1Ux1U_1U_4_27_out1 = apb_axi_esp_adapter_t_Equal_32Ux4U_1U_4_17_out1 & apb_target_PWRITE;

         // resource: apb_axi_esp_adapter_t_And_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_And_1Ux1U_1U_4_28
         assign apb_axi_esp_adapter_t_And_1Ux1U_1U_4_28_out1 = apb_axi_esp_adapter_t_Equal_32Ux5U_1U_4_18_out1 & apb_target_PWRITE;

         // resource: apb_axi_esp_adapter_t_And_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_And_1Ux1U_1U_4_29
         assign apb_axi_esp_adapter_t_And_1Ux1U_1U_4_29_out1 = apb_axi_esp_adapter_t_Equal_32Ux5U_1U_4_19_out1 & apb_target_PWRITE;

         // resource: apb_axi_esp_adapter_t_Not_1U_1U_4  instance: apb_axi_esp_adapter_t_Not_1U_1U_4_31
         assign apb_axi_esp_adapter_t_Not_1U_1U_4_31_out1 = !apb_to_esp_start_toggle_sig;

         // resource: apb_axi_esp_adapter_t_Not_1U_1U_4  instance: apb_axi_esp_adapter_t_Not_1U_1U_4_32
         assign apb_axi_esp_adapter_t_Not_1U_1U_4_32_out1 = !irq_reset_toggle_sig;

         // resource:apb_axi_esp_adapter_t_N_Muxb_1_2_6_4
         always @(apb_target_PWRITE or apb_axi_esp_adapter_t_N_Muxb_1_8_4_4_21_out1 or apb_axi_esp_adapter_t_N_Muxb_1_9_5_4_22_out1)
          begin :apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_33
            if (apb_target_PWRITE) begin
               apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_33_out1 = apb_axi_esp_adapter_t_N_Muxb_1_8_4_4_21_out1;
            end
            else begin
               apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_33_out1 = apb_axi_esp_adapter_t_N_Muxb_1_9_5_4_22_out1;
            end
         end

         // resource: regr_2
         always @(posedge clk or negedge reset)
          begin :drive_global_state2
            if (reset == 1'b0) begin
               global_state2 <= 2'd0;
            end
            else begin
               global_state2 <= apb_target_xtor_main_thread_next;
            end
         end

         // resource: mux_2bx2i
         always @(apb_target_PENABLE or apb_target_PSELX or global_state2)
          begin :drive_apb_target_xtor_main_thread_next
            case (global_state2) 

               2'd2: begin
                  if (apb_target_PENABLE) begin
                     apb_target_xtor_main_thread_next = 2'd2;
                  end
                  else begin
                     if (apb_target_PSELX) begin
                        apb_target_xtor_main_thread_next = 2'd2;
                     end
                     else begin
                        apb_target_xtor_main_thread_next = 2'd1;
                     end
                  end
               end
               
               default: begin
                  if (apb_target_PSELX) begin
                     apb_target_xtor_main_thread_next = 2'd2;
                  end
                  else begin
                     apb_target_xtor_main_thread_next = 2'd1;
                  end
               end
               
            endcase

         end

         // thread: drive_axi_initiator_AWVALID
         assign axi_initiator_AWVALID = apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_38_out1;

         // thread: drive_axi_initiator_AWUSER
         assign axi_initiator_AWUSER = axi_initiator_AWLOCK;

         // thread: drive_axi_initiator_AWREGION
         assign axi_initiator_AWREGION = axi_initiator_AWQOS;

         // thread: drive_axi_initiator_AWQOS
         assign axi_initiator_AWQOS = axi_initiator_AWCACHE;

         // thread: drive_axi_initiator_AWPROT
         assign axi_initiator_AWPROT = axi_initiator_ARPROT;

         // thread: drive_axi_initiator_AWCACHE
         assign axi_initiator_AWCACHE = axi_initiator_ARREGION;

         // thread: drive_axi_initiator_AWLOCK
         assign axi_initiator_AWLOCK = axi_initiator_WUSER;

         // thread: drive_axi_initiator_AWADDR
         assign axi_initiator_AWADDR = axi_initiator_xtor_aw_chan_data_addr;

         // thread: drive_axi_initiator_AWID
         assign axi_initiator_AWID = axi_initiator_xtor_aw_chan_data_tid;

         // thread: drive_axi_initiator_AWBURST
         assign axi_initiator_AWBURST = {1'b0, axi_initiator_xtor_aw_chan_data_size_slice};

         // thread: drive_axi_initiator_AWSIZE
         assign axi_initiator_AWSIZE = {{1'b0, axi_initiator_xtor_aw_chan_data_size_slice}, 1'b0};

         // thread: drive_axi_initiator_AWLEN
         assign axi_initiator_AWLEN = axi_initiator_xtor_aw_chan_data_len;

         // thread: drive_axi_initiator_WVALID
         assign axi_initiator_WVALID = apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_47_out1;

         // thread: drive_axi_initiator_WUSER
         assign axi_initiator_WUSER = axi_initiator_ARUSER;

         // thread: drive_axi_initiator_WLAST
         assign axi_initiator_WLAST = axi_initiator_xtor_w_chan_data_last;

         // thread: drive_axi_initiator_WDATA
         assign axi_initiator_WDATA = axi_initiator_xtor_w_chan_data_data;

         // thread: drive_axi_initiator_WSTRB
         assign axi_initiator_WSTRB = axi_initiator_xtor_w_chan_data_strb;

         // thread: drive_axi_initiator_ARVALID
         assign axi_initiator_ARVALID = apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_56_out1;

         // thread: drive_axi_initiator_ARUSER
         assign axi_initiator_ARUSER = axi_initiator_ARLOCK;

         // thread: drive_axi_initiator_ARREGION
         assign axi_initiator_ARREGION = axi_initiator_ARQOS;

         // thread: drive_axi_initiator_ARQOS
         assign axi_initiator_ARQOS = axi_initiator_ARCACHE;

         // thread: drive_axi_initiator_ARPROT
         assign axi_initiator_ARPROT = 3'd0;

         // thread: drive_axi_initiator_ARCACHE
         assign axi_initiator_ARCACHE = 4'd00;

         // thread: drive_axi_initiator_ARLOCK
         assign axi_initiator_ARLOCK = 1'b0;

         // thread: drive_axi_initiator_ARADDR
         assign axi_initiator_ARADDR = axi_initiator_xtor_ar_chan_data_addr;

         // thread: drive_axi_initiator_ARID
         assign axi_initiator_ARID = axi_initiator_xtor_ar_chan_data_tid;

         // thread: drive_axi_initiator_ARBURST
         assign axi_initiator_ARBURST = {1'b0, axi_initiator_xtor_ar_chan_data_size_slice};

         // thread: drive_axi_initiator_ARSIZE
         assign axi_initiator_ARSIZE = {{1'b0, axi_initiator_xtor_ar_chan_data_size_slice}, 1'b0};

         // thread: drive_axi_initiator_ARLEN
         assign axi_initiator_ARLEN = axi_initiator_xtor_ar_chan_data_len;

         // thread: drive_axi_initiator_RREADY
         assign axi_initiator_RREADY = apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_65_out1;

         // thread: drive_axi_initiator_BREADY
         assign axi_initiator_BREADY = apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_80_out1;

         // resource: regr_1
         always @(posedge clk or negedge reset)
          begin :drive_axi_initiator_xtor_aw_sync_snd_set_valid_prev
            if (reset == 1'b0) begin
               axi_initiator_xtor_aw_sync_snd_set_valid_prev <= 1'd0;
            end
            else begin
               axi_initiator_xtor_aw_sync_snd_set_valid_prev <= axi_initiator_xtor_aw_set_valid_curr;
            end
         end

         // resource: regr_1
         always @(posedge clk or negedge reset)
          begin :drive_axi_initiator_xtor_aw_sync_snd_reset_valid_prev
            if (reset == 1'b0) begin
               axi_initiator_xtor_aw_sync_snd_reset_valid_prev <= 1'd0;
            end
            else begin
               axi_initiator_xtor_aw_sync_snd_reset_valid_prev <= axi_initiator_xtor_aw_sync_snd_reset_valid_curr;
            end
         end

         // resource: regr_1
         always @(posedge clk or negedge reset)
          begin :drive_axi_initiator_xtor_aw_sync_snd_reset_valid_curr
            if (reset == 1'b0) begin
               axi_initiator_xtor_aw_sync_snd_reset_valid_curr <= 1'd0;
            end
            else begin
               axi_initiator_xtor_aw_sync_snd_reset_valid_curr <= apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_40_out1;
            end
         end

         // resource: regr_1
         always @(posedge clk or negedge reset)
          begin :drive_axi_initiator_xtor_aw_sync_snd_valid_flop
            if (reset == 1'b0) begin
               axi_initiator_xtor_aw_sync_snd_valid_flop <= 1'd0;
            end
            else begin
               axi_initiator_xtor_aw_sync_snd_valid_flop <= apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_38_out1;
            end
         end

         // resource: apb_axi_esp_adapter_t_Not_1U_1U_4  instance: apb_axi_esp_adapter_t_Not_1U_1U_4_39
         assign apb_axi_esp_adapter_t_Not_1U_1U_4_39_out1 = !axi_initiator_xtor_aw_sync_snd_reset_valid_curr;

         // resource:apb_axi_esp_adapter_t_N_Muxb_1_2_6_4
         always @(axi_initiator_AWREADY or axi_initiator_xtor_aw_sync_snd_reset_valid_curr or apb_axi_esp_adapter_t_Not_1U_1U_4_39_out1)
          begin :apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_40
            if (axi_initiator_AWREADY) begin
               apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_40_out1 = apb_axi_esp_adapter_t_Not_1U_1U_4_39_out1;
            end
            else begin
               apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_40_out1 = axi_initiator_xtor_aw_sync_snd_reset_valid_curr;
            end
         end

         // resource: apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_34
         assign apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_34_out1 = axi_initiator_xtor_aw_sync_snd_reset_valid_curr ^ axi_initiator_xtor_aw_sync_snd_reset_valid_prev;

         // resource: apb_axi_esp_adapter_t_Not_1U_1U_4  instance: apb_axi_esp_adapter_t_Not_1U_1U_4_35
         assign apb_axi_esp_adapter_t_Not_1U_1U_4_35_out1 = !apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_34_out1;

         // resource: apb_axi_esp_adapter_t_And_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_And_1Ux1U_1U_4_36
         assign apb_axi_esp_adapter_t_And_1Ux1U_1U_4_36_out1 = apb_axi_esp_adapter_t_Not_1U_1U_4_35_out1 & axi_initiator_xtor_aw_sync_snd_valid_flop;

         // resource: apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_37
         assign apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_37_out1 = axi_initiator_xtor_aw_set_valid_curr ^ axi_initiator_xtor_aw_sync_snd_set_valid_prev;

         // resource: apb_axi_esp_adapter_t_Or_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_38
         assign apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_38_out1 = apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_37_out1 | apb_axi_esp_adapter_t_And_1Ux1U_1U_4_36_out1;

         // resource: apb_axi_esp_adapter_t_Not_1U_1U_4  instance: apb_axi_esp_adapter_t_Not_1U_1U_4_41
         assign apb_axi_esp_adapter_t_Not_1U_1U_4_41_out1 = !apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_38_out1;

         // resource: apb_axi_esp_adapter_t_Or_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42
         assign apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_42_out1 = apb_axi_esp_adapter_t_Not_1U_1U_4_41_out1 | axi_initiator_AWREADY;

         // resource: regr_1
         always @(posedge clk or negedge reset)
          begin :drive_axi_initiator_xtor_w_sync_snd_set_valid_prev
            if (reset == 1'b0) begin
               axi_initiator_xtor_w_sync_snd_set_valid_prev <= 1'd0;
            end
            else begin
               axi_initiator_xtor_w_sync_snd_set_valid_prev <= axi_initiator_xtor_w_set_valid_curr;
            end
         end

         // resource: regr_1
         always @(posedge clk or negedge reset)
          begin :drive_axi_initiator_xtor_w_sync_snd_reset_valid_prev
            if (reset == 1'b0) begin
               axi_initiator_xtor_w_sync_snd_reset_valid_prev <= 1'd0;
            end
            else begin
               axi_initiator_xtor_w_sync_snd_reset_valid_prev <= axi_initiator_xtor_w_sync_snd_reset_valid_curr;
            end
         end

         // resource: regr_1
         always @(posedge clk or negedge reset)
          begin :drive_axi_initiator_xtor_w_sync_snd_reset_valid_curr
            if (reset == 1'b0) begin
               axi_initiator_xtor_w_sync_snd_reset_valid_curr <= 1'd0;
            end
            else begin
               axi_initiator_xtor_w_sync_snd_reset_valid_curr <= apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_49_out1;
            end
         end

         // resource: regr_1
         always @(posedge clk or negedge reset)
          begin :drive_axi_initiator_xtor_w_sync_snd_valid_flop
            if (reset == 1'b0) begin
               axi_initiator_xtor_w_sync_snd_valid_flop <= 1'd0;
            end
            else begin
               axi_initiator_xtor_w_sync_snd_valid_flop <= apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_47_out1;
            end
         end

         // resource: apb_axi_esp_adapter_t_Not_1U_1U_4  instance: apb_axi_esp_adapter_t_Not_1U_1U_4_48
         assign apb_axi_esp_adapter_t_Not_1U_1U_4_48_out1 = !axi_initiator_xtor_w_sync_snd_reset_valid_curr;

         // resource:apb_axi_esp_adapter_t_N_Muxb_1_2_6_4
         always @(axi_initiator_WREADY or axi_initiator_xtor_w_sync_snd_reset_valid_curr or apb_axi_esp_adapter_t_Not_1U_1U_4_48_out1)
          begin :apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_49
            if (axi_initiator_WREADY) begin
               apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_49_out1 = apb_axi_esp_adapter_t_Not_1U_1U_4_48_out1;
            end
            else begin
               apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_49_out1 = axi_initiator_xtor_w_sync_snd_reset_valid_curr;
            end
         end

         // resource: apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_43
         assign apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_43_out1 = axi_initiator_xtor_w_sync_snd_reset_valid_curr ^ axi_initiator_xtor_w_sync_snd_reset_valid_prev;

         // resource: apb_axi_esp_adapter_t_Not_1U_1U_4  instance: apb_axi_esp_adapter_t_Not_1U_1U_4_44
         assign apb_axi_esp_adapter_t_Not_1U_1U_4_44_out1 = !apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_43_out1;

         // resource: apb_axi_esp_adapter_t_And_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_And_1Ux1U_1U_4_45
         assign apb_axi_esp_adapter_t_And_1Ux1U_1U_4_45_out1 = apb_axi_esp_adapter_t_Not_1U_1U_4_44_out1 & axi_initiator_xtor_w_sync_snd_valid_flop;

         // resource: apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_46
         assign apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_46_out1 = axi_initiator_xtor_w_set_valid_curr ^ axi_initiator_xtor_w_sync_snd_set_valid_prev;

         // resource: apb_axi_esp_adapter_t_Or_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_47
         assign apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_47_out1 = apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_46_out1 | apb_axi_esp_adapter_t_And_1Ux1U_1U_4_45_out1;

         // resource: apb_axi_esp_adapter_t_Not_1U_1U_4  instance: apb_axi_esp_adapter_t_Not_1U_1U_4_50
         assign apb_axi_esp_adapter_t_Not_1U_1U_4_50_out1 = !apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_47_out1;

         // resource: apb_axi_esp_adapter_t_Or_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_51
         assign apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_51_out1 = apb_axi_esp_adapter_t_Not_1U_1U_4_50_out1 | axi_initiator_WREADY;

         // resource: regr_1
         always @(posedge clk or negedge reset)
          begin :drive_axi_initiator_xtor_ar_sync_snd_set_valid_prev
            if (reset == 1'b0) begin
               axi_initiator_xtor_ar_sync_snd_set_valid_prev <= 1'd0;
            end
            else begin
               axi_initiator_xtor_ar_sync_snd_set_valid_prev <= axi_initiator_xtor_ar_set_valid_curr;
            end
         end

         // resource: regr_1
         always @(posedge clk or negedge reset)
          begin :drive_axi_initiator_xtor_ar_sync_snd_reset_valid_prev
            if (reset == 1'b0) begin
               axi_initiator_xtor_ar_sync_snd_reset_valid_prev <= 1'd0;
            end
            else begin
               axi_initiator_xtor_ar_sync_snd_reset_valid_prev <= axi_initiator_xtor_ar_sync_snd_reset_valid_curr;
            end
         end

         // resource: regr_1
         always @(posedge clk or negedge reset)
          begin :drive_axi_initiator_xtor_ar_sync_snd_reset_valid_curr
            if (reset == 1'b0) begin
               axi_initiator_xtor_ar_sync_snd_reset_valid_curr <= 1'd0;
            end
            else begin
               axi_initiator_xtor_ar_sync_snd_reset_valid_curr <= apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_58_out1;
            end
         end

         // resource: regr_1
         always @(posedge clk or negedge reset)
          begin :drive_axi_initiator_xtor_ar_sync_snd_valid_flop
            if (reset == 1'b0) begin
               axi_initiator_xtor_ar_sync_snd_valid_flop <= 1'd0;
            end
            else begin
               axi_initiator_xtor_ar_sync_snd_valid_flop <= apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_56_out1;
            end
         end

         // resource: apb_axi_esp_adapter_t_Not_1U_1U_4  instance: apb_axi_esp_adapter_t_Not_1U_1U_4_57
         assign apb_axi_esp_adapter_t_Not_1U_1U_4_57_out1 = !axi_initiator_xtor_ar_sync_snd_reset_valid_curr;

         // resource:apb_axi_esp_adapter_t_N_Muxb_1_2_6_4
         always @(axi_initiator_ARREADY or axi_initiator_xtor_ar_sync_snd_reset_valid_curr or apb_axi_esp_adapter_t_Not_1U_1U_4_57_out1)
          begin :apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_58
            if (axi_initiator_ARREADY) begin
               apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_58_out1 = apb_axi_esp_adapter_t_Not_1U_1U_4_57_out1;
            end
            else begin
               apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_58_out1 = axi_initiator_xtor_ar_sync_snd_reset_valid_curr;
            end
         end

         // resource: apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_52
         assign apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_52_out1 = axi_initiator_xtor_ar_sync_snd_reset_valid_curr ^ axi_initiator_xtor_ar_sync_snd_reset_valid_prev;

         // resource: apb_axi_esp_adapter_t_Not_1U_1U_4  instance: apb_axi_esp_adapter_t_Not_1U_1U_4_53
         assign apb_axi_esp_adapter_t_Not_1U_1U_4_53_out1 = !apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_52_out1;

         // resource: apb_axi_esp_adapter_t_And_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_And_1Ux1U_1U_4_54
         assign apb_axi_esp_adapter_t_And_1Ux1U_1U_4_54_out1 = apb_axi_esp_adapter_t_Not_1U_1U_4_53_out1 & axi_initiator_xtor_ar_sync_snd_valid_flop;

         // resource: apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_55
         assign apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_55_out1 = axi_initiator_xtor_ar_set_valid_curr ^ axi_initiator_xtor_ar_sync_snd_set_valid_prev;

         // resource: apb_axi_esp_adapter_t_Or_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_56
         assign apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_56_out1 = apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_55_out1 | apb_axi_esp_adapter_t_And_1Ux1U_1U_4_54_out1;

         // resource: apb_axi_esp_adapter_t_Not_1U_1U_4  instance: apb_axi_esp_adapter_t_Not_1U_1U_4_59
         assign apb_axi_esp_adapter_t_Not_1U_1U_4_59_out1 = !apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_56_out1;

         // resource: apb_axi_esp_adapter_t_Or_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60
         assign apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_60_out1 = apb_axi_esp_adapter_t_Not_1U_1U_4_59_out1 | axi_initiator_ARREADY;

         // resource: regr_32
         always @(posedge clk or negedge reset)
          begin :drive_axi_initiator_xtor_r_data_buf_data
            if (reset == 1'b0) begin
               axi_initiator_xtor_r_data_buf_data <= 32'd0000000000;
            end
            else begin
               axi_initiator_xtor_r_data_buf_data <= apb_axi_esp_adapter_t_N_Mux_32_2_0_4_70_out1;
            end
         end

         // resource: regr_1
         always @(posedge clk or negedge reset)
          begin :drive_axi_initiator_xtor_r_sync_rcv_set_ready_prev
            if (reset == 1'b0) begin
               axi_initiator_xtor_r_sync_rcv_set_ready_prev <= 1'd0;
            end
            else begin
               axi_initiator_xtor_r_sync_rcv_set_ready_prev <= axi_initiator_xtor_r_set_ready_curr;
            end
         end

         // resource: regr_1
         always @(posedge clk or negedge reset)
          begin :drive_axi_initiator_xtor_r_sync_rcv_reset_ready_prev
            if (reset == 1'b0) begin
               axi_initiator_xtor_r_sync_rcv_reset_ready_prev <= 1'd0;
            end
            else begin
               axi_initiator_xtor_r_sync_rcv_reset_ready_prev <= axi_initiator_xtor_r_sync_rcv_reset_ready_curr;
            end
         end

         // resource: regr_1
         always @(posedge clk or negedge reset)
          begin :drive_axi_initiator_xtor_r_sync_rcv_reset_ready_curr
            if (reset == 1'b0) begin
               axi_initiator_xtor_r_sync_rcv_reset_ready_curr <= 1'd0;
            end
            else begin
               axi_initiator_xtor_r_sync_rcv_reset_ready_curr <= apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_68_out1;
            end
         end

         // resource: regr_1
         always @(posedge clk or negedge reset)
          begin :drive_axi_initiator_xtor_r_sync_rcv_ready_flop
            if (reset == 1'b0) begin
               axi_initiator_xtor_r_sync_rcv_ready_flop <= 1'd1;
            end
            else begin
               axi_initiator_xtor_r_sync_rcv_ready_flop <= apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_65_out1;
            end
         end

         // resource: apb_axi_esp_adapter_t_Not_1U_1U_4  instance: apb_axi_esp_adapter_t_Not_1U_1U_4_66
         assign apb_axi_esp_adapter_t_Not_1U_1U_4_66_out1 = !axi_initiator_xtor_r_sync_rcv_reset_ready_curr;

         // resource: apb_axi_esp_adapter_t_And_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_And_1Ux1U_1U_4_67
         assign apb_axi_esp_adapter_t_And_1Ux1U_1U_4_67_out1 = axi_initiator_RVALID & apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_65_out1;

         // resource:apb_axi_esp_adapter_t_N_Muxb_1_2_6_4
         always @(axi_initiator_xtor_r_sync_rcv_reset_ready_curr or apb_axi_esp_adapter_t_Not_1U_1U_4_66_out1 or apb_axi_esp_adapter_t_And_1Ux1U_1U_4_67_out1)
          begin :apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_68
            if (apb_axi_esp_adapter_t_And_1Ux1U_1U_4_67_out1) begin
               apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_68_out1 = apb_axi_esp_adapter_t_Not_1U_1U_4_66_out1;
            end
            else begin
               apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_68_out1 = axi_initiator_xtor_r_sync_rcv_reset_ready_curr;
            end
         end

         // resource:apb_axi_esp_adapter_t_N_Mux_32_2_0_4
         always @(axi_initiator_RDATA or axi_initiator_xtor_r_data_buf_data or apb_axi_esp_adapter_t_And_1Ux1U_1U_4_67_out1)
          begin :apb_axi_esp_adapter_t_N_Mux_32_2_0_4_70
            if (apb_axi_esp_adapter_t_And_1Ux1U_1U_4_67_out1) begin
               apb_axi_esp_adapter_t_N_Mux_32_2_0_4_70_out1 = axi_initiator_RDATA;
            end
            else begin
               apb_axi_esp_adapter_t_N_Mux_32_2_0_4_70_out1 = axi_initiator_xtor_r_data_buf_data;
            end
         end

         // resource: apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_61
         assign apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_61_out1 = axi_initiator_xtor_r_sync_rcv_reset_ready_curr ^ axi_initiator_xtor_r_sync_rcv_reset_ready_prev;

         // resource: apb_axi_esp_adapter_t_Not_1U_1U_4  instance: apb_axi_esp_adapter_t_Not_1U_1U_4_62
         assign apb_axi_esp_adapter_t_Not_1U_1U_4_62_out1 = !apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_61_out1;

         // resource: apb_axi_esp_adapter_t_And_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_And_1Ux1U_1U_4_63
         assign apb_axi_esp_adapter_t_And_1Ux1U_1U_4_63_out1 = apb_axi_esp_adapter_t_Not_1U_1U_4_62_out1 & axi_initiator_xtor_r_sync_rcv_ready_flop;

         // resource: apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_64
         assign apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_64_out1 = axi_initiator_xtor_r_set_ready_curr ^ axi_initiator_xtor_r_sync_rcv_set_ready_prev;

         // resource: apb_axi_esp_adapter_t_Or_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_65
         assign apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_65_out1 = apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_64_out1 | apb_axi_esp_adapter_t_And_1Ux1U_1U_4_63_out1;

         // resource: apb_axi_esp_adapter_t_Not_1U_1U_4  instance: apb_axi_esp_adapter_t_Not_1U_1U_4_74
         assign apb_axi_esp_adapter_t_Not_1U_1U_4_74_out1 = !apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_65_out1;

         // resource: apb_axi_esp_adapter_t_Or_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_75
         assign apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_75_out1 = apb_axi_esp_adapter_t_Not_1U_1U_4_74_out1 | axi_initiator_RVALID;

         // resource: regr_1
         always @(posedge clk or negedge reset)
          begin :drive_axi_initiator_xtor_b_sync_rcv_set_ready_prev
            if (reset == 1'b0) begin
               axi_initiator_xtor_b_sync_rcv_set_ready_prev <= 1'd0;
            end
            else begin
               axi_initiator_xtor_b_sync_rcv_set_ready_prev <= axi_initiator_xtor_b_set_ready_curr;
            end
         end

         // resource: regr_1
         always @(posedge clk or negedge reset)
          begin :drive_axi_initiator_xtor_b_sync_rcv_reset_ready_prev
            if (reset == 1'b0) begin
               axi_initiator_xtor_b_sync_rcv_reset_ready_prev <= 1'd0;
            end
            else begin
               axi_initiator_xtor_b_sync_rcv_reset_ready_prev <= axi_initiator_xtor_b_sync_rcv_reset_ready_curr;
            end
         end

         // resource: regr_1
         always @(posedge clk or negedge reset)
          begin :drive_axi_initiator_xtor_b_sync_rcv_reset_ready_curr
            if (reset == 1'b0) begin
               axi_initiator_xtor_b_sync_rcv_reset_ready_curr <= 1'd0;
            end
            else begin
               axi_initiator_xtor_b_sync_rcv_reset_ready_curr <= apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_83_out1;
            end
         end

         // resource: regr_1
         always @(posedge clk or negedge reset)
          begin :drive_axi_initiator_xtor_b_sync_rcv_ready_flop
            if (reset == 1'b0) begin
               axi_initiator_xtor_b_sync_rcv_ready_flop <= 1'd1;
            end
            else begin
               axi_initiator_xtor_b_sync_rcv_ready_flop <= apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_80_out1;
            end
         end

         // resource: apb_axi_esp_adapter_t_Not_1U_1U_4  instance: apb_axi_esp_adapter_t_Not_1U_1U_4_81
         assign apb_axi_esp_adapter_t_Not_1U_1U_4_81_out1 = !axi_initiator_xtor_b_sync_rcv_reset_ready_curr;

         // resource: apb_axi_esp_adapter_t_And_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_And_1Ux1U_1U_4_82
         assign apb_axi_esp_adapter_t_And_1Ux1U_1U_4_82_out1 = axi_initiator_BVALID & apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_80_out1;

         // resource:apb_axi_esp_adapter_t_N_Muxb_1_2_6_4
         always @(axi_initiator_xtor_b_sync_rcv_reset_ready_curr or apb_axi_esp_adapter_t_Not_1U_1U_4_81_out1 or apb_axi_esp_adapter_t_And_1Ux1U_1U_4_82_out1)
          begin :apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_83
            if (apb_axi_esp_adapter_t_And_1Ux1U_1U_4_82_out1) begin
               apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_83_out1 = apb_axi_esp_adapter_t_Not_1U_1U_4_81_out1;
            end
            else begin
               apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_83_out1 = axi_initiator_xtor_b_sync_rcv_reset_ready_curr;
            end
         end

         // resource: apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_76
         assign apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_76_out1 = axi_initiator_xtor_b_sync_rcv_reset_ready_curr ^ axi_initiator_xtor_b_sync_rcv_reset_ready_prev;

         // resource: apb_axi_esp_adapter_t_Not_1U_1U_4  instance: apb_axi_esp_adapter_t_Not_1U_1U_4_77
         assign apb_axi_esp_adapter_t_Not_1U_1U_4_77_out1 = !apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_76_out1;

         // resource: apb_axi_esp_adapter_t_And_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_And_1Ux1U_1U_4_78
         assign apb_axi_esp_adapter_t_And_1Ux1U_1U_4_78_out1 = apb_axi_esp_adapter_t_Not_1U_1U_4_77_out1 & axi_initiator_xtor_b_sync_rcv_ready_flop;

         // resource: apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_79
         assign apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_79_out1 = axi_initiator_xtor_b_set_ready_curr ^ axi_initiator_xtor_b_sync_rcv_set_ready_prev;

         // resource: apb_axi_esp_adapter_t_Or_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_80
         assign apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_80_out1 = apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_79_out1 | apb_axi_esp_adapter_t_And_1Ux1U_1U_4_78_out1;

         // resource: apb_axi_esp_adapter_t_Not_1U_1U_4  instance: apb_axi_esp_adapter_t_Not_1U_1U_4_87
         assign apb_axi_esp_adapter_t_Not_1U_1U_4_87_out1 = !apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_80_out1;

         // resource: apb_axi_esp_adapter_t_Or_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_88
         assign apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_88_out1 = apb_axi_esp_adapter_t_Not_1U_1U_4_87_out1 | axi_initiator_BVALID;

         // resource: regr_32
         always @(posedge clk or negedge reset)
          begin :drive_dma_read_ctrl_data_buf_index
            if (reset == 1'b0) begin
               dma_read_ctrl_data_buf_index <= 32'd0000000000;
            end
            else begin
               dma_read_ctrl_data_buf_index <= apb_axi_esp_adapter_t_N_Mux_32_2_0_4_97_out1;
            end
         end

         // resource: regr_32
         always @(posedge clk or negedge reset)
          begin :drive_dma_read_ctrl_data_buf_length
            if (reset == 1'b0) begin
               dma_read_ctrl_data_buf_length <= 32'd0000000000;
            end
            else begin
               dma_read_ctrl_data_buf_length <= apb_axi_esp_adapter_t_N_Mux_32_2_0_4_98_out1;
            end
         end

         // resource: regr_1
         always @(posedge clk or negedge reset)
          begin :drive_dma_read_ctrl_sync_rcv_set_ready_prev
            if (reset == 1'b0) begin
               dma_read_ctrl_sync_rcv_set_ready_prev <= 1'd0;
            end
            else begin
               dma_read_ctrl_sync_rcv_set_ready_prev <= dma_read_ctrl_set_ready_curr;
            end
         end

         // resource: regr_1
         always @(posedge clk or negedge reset)
          begin :drive_dma_read_ctrl_sync_rcv_reset_ready_prev
            if (reset == 1'b0) begin
               dma_read_ctrl_sync_rcv_reset_ready_prev <= 1'd0;
            end
            else begin
               dma_read_ctrl_sync_rcv_reset_ready_prev <= dma_read_ctrl_sync_rcv_reset_ready_curr;
            end
         end

         // resource: regr_1
         always @(posedge clk or negedge reset)
          begin :drive_dma_read_ctrl_sync_rcv_reset_ready_curr
            if (reset == 1'b0) begin
               dma_read_ctrl_sync_rcv_reset_ready_curr <= 1'd0;
            end
            else begin
               dma_read_ctrl_sync_rcv_reset_ready_curr <= apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_96_out1;
            end
         end

         // resource: regr_1
         always @(posedge clk or negedge reset)
          begin :drive_dma_read_ctrl_sync_rcv_ready_flop
            if (reset == 1'b0) begin
               dma_read_ctrl_sync_rcv_ready_flop <= 1'd1;
            end
            else begin
               dma_read_ctrl_sync_rcv_ready_flop <= dma_read_ctrl_ready;
            end
         end

         // resource: apb_axi_esp_adapter_t_Not_1U_1U_4  instance: apb_axi_esp_adapter_t_Not_1U_1U_4_94
         assign apb_axi_esp_adapter_t_Not_1U_1U_4_94_out1 = !dma_read_ctrl_sync_rcv_reset_ready_curr;

         // resource: apb_axi_esp_adapter_t_And_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_And_1Ux1U_1U_4_95
         assign apb_axi_esp_adapter_t_And_1Ux1U_1U_4_95_out1 = dma_read_ctrl_valid & dma_read_ctrl_ready;

         // resource:apb_axi_esp_adapter_t_N_Muxb_1_2_6_4
         always @(dma_read_ctrl_sync_rcv_reset_ready_curr or apb_axi_esp_adapter_t_Not_1U_1U_4_94_out1 or apb_axi_esp_adapter_t_And_1Ux1U_1U_4_95_out1)
          begin :apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_96
            if (apb_axi_esp_adapter_t_And_1Ux1U_1U_4_95_out1) begin
               apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_96_out1 = apb_axi_esp_adapter_t_Not_1U_1U_4_94_out1;
            end
            else begin
               apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_96_out1 = dma_read_ctrl_sync_rcv_reset_ready_curr;
            end
         end

         // resource:apb_axi_esp_adapter_t_N_Mux_32_2_0_4
         always @(dma_read_ctrl_data_index or dma_read_ctrl_data_buf_index or apb_axi_esp_adapter_t_And_1Ux1U_1U_4_95_out1)
          begin :apb_axi_esp_adapter_t_N_Mux_32_2_0_4_97
            if (apb_axi_esp_adapter_t_And_1Ux1U_1U_4_95_out1) begin
               apb_axi_esp_adapter_t_N_Mux_32_2_0_4_97_out1 = dma_read_ctrl_data_index;
            end
            else begin
               apb_axi_esp_adapter_t_N_Mux_32_2_0_4_97_out1 = dma_read_ctrl_data_buf_index;
            end
         end

         // resource:apb_axi_esp_adapter_t_N_Mux_32_2_0_4
         always @(dma_read_ctrl_data_length or dma_read_ctrl_data_buf_length or apb_axi_esp_adapter_t_And_1Ux1U_1U_4_95_out1)
          begin :apb_axi_esp_adapter_t_N_Mux_32_2_0_4_98
            if (apb_axi_esp_adapter_t_And_1Ux1U_1U_4_95_out1) begin
               apb_axi_esp_adapter_t_N_Mux_32_2_0_4_98_out1 = dma_read_ctrl_data_length;
            end
            else begin
               apb_axi_esp_adapter_t_N_Mux_32_2_0_4_98_out1 = dma_read_ctrl_data_buf_length;
            end
         end

         // thread: drive_dma_read_ctrl_ready
         assign dma_read_ctrl_ready = apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_93_out1;

         // resource: apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_89
         assign apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_89_out1 = dma_read_ctrl_sync_rcv_reset_ready_curr ^ dma_read_ctrl_sync_rcv_reset_ready_prev;

         // resource: apb_axi_esp_adapter_t_Not_1U_1U_4  instance: apb_axi_esp_adapter_t_Not_1U_1U_4_90
         assign apb_axi_esp_adapter_t_Not_1U_1U_4_90_out1 = !apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_89_out1;

         // resource: apb_axi_esp_adapter_t_And_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_And_1Ux1U_1U_4_91
         assign apb_axi_esp_adapter_t_And_1Ux1U_1U_4_91_out1 = apb_axi_esp_adapter_t_Not_1U_1U_4_90_out1 & dma_read_ctrl_sync_rcv_ready_flop;

         // resource: apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_92
         assign apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_92_out1 = dma_read_ctrl_set_ready_curr ^ dma_read_ctrl_sync_rcv_set_ready_prev;

         // resource: apb_axi_esp_adapter_t_Or_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_93
         assign apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_93_out1 = apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_92_out1 | apb_axi_esp_adapter_t_And_1Ux1U_1U_4_91_out1;

         // resource: apb_axi_esp_adapter_t_Not_1U_1U_4  instance: apb_axi_esp_adapter_t_Not_1U_1U_4_99
         assign apb_axi_esp_adapter_t_Not_1U_1U_4_99_out1 = !dma_read_ctrl_ready;

         // resource: apb_axi_esp_adapter_t_Or_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_100
         assign apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_100_out1 = apb_axi_esp_adapter_t_Not_1U_1U_4_99_out1 | dma_read_ctrl_valid;

         // resource: apb_axi_esp_adapter_t_Not_1U_1U_4  instance: apb_axi_esp_adapter_t_Not_1U_1U_4_101
         assign apb_axi_esp_adapter_t_Not_1U_1U_4_101_out1 = !dma_read_ctrl_ready;

         // resource: apb_axi_esp_adapter_t_Or_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102
         assign apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_102_out1 = apb_axi_esp_adapter_t_Not_1U_1U_4_101_out1 | dma_read_ctrl_valid;

         // resource: regr_32
         always @(posedge clk or negedge reset)
          begin :drive_dma_write_ctrl_data_buf_index
            if (reset == 1'b0) begin
               dma_write_ctrl_data_buf_index <= 32'd0000000000;
            end
            else begin
               dma_write_ctrl_data_buf_index <= apb_axi_esp_adapter_t_N_Mux_32_2_0_4_111_out1;
            end
         end

         // resource: regr_32
         always @(posedge clk or negedge reset)
          begin :drive_dma_write_ctrl_data_buf_length
            if (reset == 1'b0) begin
               dma_write_ctrl_data_buf_length <= 32'd0000000000;
            end
            else begin
               dma_write_ctrl_data_buf_length <= apb_axi_esp_adapter_t_N_Mux_32_2_0_4_112_out1;
            end
         end

         // resource: regr_1
         always @(posedge clk or negedge reset)
          begin :drive_dma_write_ctrl_sync_rcv_set_ready_prev
            if (reset == 1'b0) begin
               dma_write_ctrl_sync_rcv_set_ready_prev <= 1'd0;
            end
            else begin
               dma_write_ctrl_sync_rcv_set_ready_prev <= dma_write_ctrl_set_ready_curr;
            end
         end

         // resource: regr_1
         always @(posedge clk or negedge reset)
          begin :drive_dma_write_ctrl_sync_rcv_reset_ready_prev
            if (reset == 1'b0) begin
               dma_write_ctrl_sync_rcv_reset_ready_prev <= 1'd0;
            end
            else begin
               dma_write_ctrl_sync_rcv_reset_ready_prev <= dma_write_ctrl_sync_rcv_reset_ready_curr;
            end
         end

         // resource: regr_1
         always @(posedge clk or negedge reset)
          begin :drive_dma_write_ctrl_sync_rcv_reset_ready_curr
            if (reset == 1'b0) begin
               dma_write_ctrl_sync_rcv_reset_ready_curr <= 1'd0;
            end
            else begin
               dma_write_ctrl_sync_rcv_reset_ready_curr <= apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_110_out1;
            end
         end

         // resource: regr_1
         always @(posedge clk or negedge reset)
          begin :drive_dma_write_ctrl_sync_rcv_ready_flop
            if (reset == 1'b0) begin
               dma_write_ctrl_sync_rcv_ready_flop <= 1'd1;
            end
            else begin
               dma_write_ctrl_sync_rcv_ready_flop <= dma_write_ctrl_ready;
            end
         end

         // resource: apb_axi_esp_adapter_t_Not_1U_1U_4  instance: apb_axi_esp_adapter_t_Not_1U_1U_4_108
         assign apb_axi_esp_adapter_t_Not_1U_1U_4_108_out1 = !dma_write_ctrl_sync_rcv_reset_ready_curr;

         // resource: apb_axi_esp_adapter_t_And_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_And_1Ux1U_1U_4_109
         assign apb_axi_esp_adapter_t_And_1Ux1U_1U_4_109_out1 = dma_write_ctrl_valid & dma_write_ctrl_ready;

         // resource:apb_axi_esp_adapter_t_N_Muxb_1_2_6_4
         always @(dma_write_ctrl_sync_rcv_reset_ready_curr or apb_axi_esp_adapter_t_Not_1U_1U_4_108_out1 or apb_axi_esp_adapter_t_And_1Ux1U_1U_4_109_out1)
          begin :apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_110
            if (apb_axi_esp_adapter_t_And_1Ux1U_1U_4_109_out1) begin
               apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_110_out1 = apb_axi_esp_adapter_t_Not_1U_1U_4_108_out1;
            end
            else begin
               apb_axi_esp_adapter_t_N_Muxb_1_2_6_4_110_out1 = dma_write_ctrl_sync_rcv_reset_ready_curr;
            end
         end

         // resource:apb_axi_esp_adapter_t_N_Mux_32_2_0_4
         always @(dma_write_ctrl_data_index or dma_write_ctrl_data_buf_index or apb_axi_esp_adapter_t_And_1Ux1U_1U_4_109_out1)
          begin :apb_axi_esp_adapter_t_N_Mux_32_2_0_4_111
            if (apb_axi_esp_adapter_t_And_1Ux1U_1U_4_109_out1) begin
               apb_axi_esp_adapter_t_N_Mux_32_2_0_4_111_out1 = dma_write_ctrl_data_index;
            end
            else begin
               apb_axi_esp_adapter_t_N_Mux_32_2_0_4_111_out1 = dma_write_ctrl_data_buf_index;
            end
         end

         // resource:apb_axi_esp_adapter_t_N_Mux_32_2_0_4
         always @(dma_write_ctrl_data_length or dma_write_ctrl_data_buf_length or apb_axi_esp_adapter_t_And_1Ux1U_1U_4_109_out1)
          begin :apb_axi_esp_adapter_t_N_Mux_32_2_0_4_112
            if (apb_axi_esp_adapter_t_And_1Ux1U_1U_4_109_out1) begin
               apb_axi_esp_adapter_t_N_Mux_32_2_0_4_112_out1 = dma_write_ctrl_data_length;
            end
            else begin
               apb_axi_esp_adapter_t_N_Mux_32_2_0_4_112_out1 = dma_write_ctrl_data_buf_length;
            end
         end

         // thread: drive_dma_write_ctrl_ready
         assign dma_write_ctrl_ready = apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_107_out1;

         // resource: apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_103
         assign apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_103_out1 = dma_write_ctrl_sync_rcv_reset_ready_curr ^ dma_write_ctrl_sync_rcv_reset_ready_prev;

         // resource: apb_axi_esp_adapter_t_Not_1U_1U_4  instance: apb_axi_esp_adapter_t_Not_1U_1U_4_104
         assign apb_axi_esp_adapter_t_Not_1U_1U_4_104_out1 = !apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_103_out1;

         // resource: apb_axi_esp_adapter_t_And_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_And_1Ux1U_1U_4_105
         assign apb_axi_esp_adapter_t_And_1Ux1U_1U_4_105_out1 = apb_axi_esp_adapter_t_Not_1U_1U_4_104_out1 & dma_write_ctrl_sync_rcv_ready_flop;

         // resource: apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_106
         assign apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_106_out1 = dma_write_ctrl_set_ready_curr ^ dma_write_ctrl_sync_rcv_set_ready_prev;

         // resource: apb_axi_esp_adapter_t_Or_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_107
         assign apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_107_out1 = apb_axi_esp_adapter_t_Xor_1Ux1U_1U_4_106_out1 | apb_axi_esp_adapter_t_And_1Ux1U_1U_4_105_out1;

         // resource: apb_axi_esp_adapter_t_Not_1U_1U_4  instance: apb_axi_esp_adapter_t_Not_1U_1U_4_113
         assign apb_axi_esp_adapter_t_Not_1U_1U_4_113_out1 = !dma_write_ctrl_ready;

         // resource: apb_axi_esp_adapter_t_Or_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114
         assign apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_114_out1 = apb_axi_esp_adapter_t_Not_1U_1U_4_113_out1 | dma_write_ctrl_valid;

         // resource: apb_axi_esp_adapter_t_Not_1U_1U_4  instance: apb_axi_esp_adapter_t_Not_1U_1U_4_115
         assign apb_axi_esp_adapter_t_Not_1U_1U_4_115_out1 = !dma_write_ctrl_ready;

         // resource: apb_axi_esp_adapter_t_Or_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116
         assign apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116_out1 = apb_axi_esp_adapter_t_Not_1U_1U_4_115_out1 | dma_write_ctrl_valid;

         // resource: apb_axi_esp_adapter_t_Or_1Ux1U_1U_4  instance: apb_axi_esp_adapter_t_Or_1Ux1U_1U_4_116
         assign apb_target_PREADY = 1'd1;


endmodule

